<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module - Fix on Cloud DevSecOps workshop with Bridgecrew</title>
    <link>/terraform/50_module_three.html</link>
    <description>Recent content in Module - Fix on Cloud DevSecOps workshop with Bridgecrew</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/terraform/50_module_three/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bridgecrew platform results</title>
      <link>/terraform/50_module_three/3001_bridgecrew_dashboard_results.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3001_bridgecrew_dashboard_results.html</guid>
      <description>Investigating security violations in Bridgecrew Providing feedback in IDEs and CI/CD pipelines provides valuable insights into the posture of your code. Bridgecrew provides a centralized view for tracking misconfigurations across your code scans and runtime environments. We’ll start with the view across code scans.
Navigate to the Projects tab in the Bridgecrew platform. Here you can see the results of your GitHub scan, as well as any other code scan that includes a repository ID and your Bridgecrew API.</description>
    </item>
    
    <item>
      <title>Pull request fixes</title>
      <link>/terraform/50_module_three/3002_bridgecrew_pull_request_fix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3002_bridgecrew_pull_request_fix.html</guid>
      <description>Automating fixes through pull requests Now that you’ve pulled in multiple infrastructure sources, you may get overwhelmed at the prospect of fixing the several dozen issues Bridgecrew has identified. To help us implement fixes as fast as possible, Bridgecrew generates and pushes fix pull requests back into your GitHub repository.
Let’s walk through the process with one of the policies you looked at earlier, &amp;ldquo;Ensure bucket ACL does not grant READ permission to everyone&amp;rdquo;</description>
    </item>
    
    <item>
      <title>AWS runtime scanning</title>
      <link>/terraform/50_module_three/3003_bridgecrew_automate_add_runtime.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3003_bridgecrew_automate_add_runtime.html</guid>
      <description>Scanning runtime resources for vulnerable infrastructure Let’s switch gears to address infrastructure that wasn&amp;rsquo;t deployed by Terraform.
Greenfield infrastructure as code deployments are a luxury not many of us have. In reality, our AWS accounts have objects that were created manually for one reason or another. Transitioning to IaC is rarely a one-and-done affair, so you may have objects in your AWS accounts that are managed by a team that has not yet made the switch.</description>
    </item>
    
    <item>
      <title>AWS fixes in runtime</title>
      <link>/terraform/50_module_three/3004_bridgecrew_automate_fix_runtime.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3004_bridgecrew_automate_fix_runtime.html</guid>
      <description>Automating fixes in runtime Similar to what we did with pull request fixes in the previous module, Bridgecrew allows for immediate remediation of issues in runtime by reconfiguring your objects via the AWS APIs. Typically, it&amp;rsquo;s a best practice to make all changes to IaC provisioned resources in the code that provisioned them or else you create drift (discussed next). However, for resources not provisioned using IaC templates, runtime remediations make meeting compliance much easier.</description>
    </item>
    
    <item>
      <title>Drift Detection</title>
      <link>/terraform/50_module_three/3005_bridgecrew_drift_detections.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3005_bridgecrew_drift_detections.html</guid>
      <description>Drift Detection between AWS and Terraform Cloud state using Bridgecrew In this final section, you’ll switch gears and detect drift. Drift occurs when the infrastructure deployed in the cloud is different from what was defined in the IaC template. You call what the infrastructure should be the “state” saved in files locally or in Terraform Cloud. For example, if the infrastructure in AWS may have different configurations than the Terraform template defined.</description>
    </item>
    
  </channel>
</rss>
