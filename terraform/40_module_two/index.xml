<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module - Automate on Cloud DevSecOps workshop with Bridgecrew</title>
    <link>/terraform/40_module_two.html</link>
    <description>Recent content in Module - Automate on Cloud DevSecOps workshop with Bridgecrew</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/terraform/40_module_two/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub Action</title>
      <link>/terraform/40_module_two/2001_automating_iac_github_action.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2001_automating_iac_github_action.html</guid>
      <description>Setting up the Bridgecrew GitHub Action You can leverage GitHub actions to run automated scans for every build or specific builds, such as the ones that merge into the master branch. This action can alert on misconfigurations, or you can set it up to block code from being merged if certain policies are violated. It can also send the results to Bridgecrew for further review and remediation steps.
Typically, you wouldn’t do more than one scan during a build, such as two Actions, a CI/CD integration and a Terraform Cloud scan, so you can remove the Actions when you set up the Terraform Cloud scan or leave it for illustrative purposes.</description>
    </item>
    
    <item>
      <title>Yor tag &amp; trace</title>
      <link>/terraform/40_module_two/2002_yor_github_action.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2002_yor_github_action.html</guid>
      <description>An introduction to Yor Yor is an open-source tool that automatically tags infrastructure as code (IaC) templates with attribution and ownership details, unique IDs that get carried across to cloud resources, and any other need-to-know information. It can run locally, as a pre-commit hook, or in a CI/CD pipeline.
For drift detection, the important tag is yor_trace. It’s a unique identifier that helps us trace from a cloud runtime configuration back to the IaC that provisioned it.</description>
    </item>
    
    <item>
      <title>Terraform Cloud with Run Tasks</title>
      <link>/terraform/40_module_two/2003_automating_iac_terraform_cloud_runtask.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2003_automating_iac_terraform_cloud_runtask.html</guid>
      <description>Leveraging Terraform Cloud and Run Tasks for Bridgecrew scans Bridgecrew has a native integration with Terraform Cloud that leverages Run Tasks for policy controls. This means any commit that is pushed to Terraform Cloud will run through a Bridgecrew scan, identifying policy violations, blocking misconfigured builds, and detecting drift, all from the same place that you collaborate on Terraform templates, automate deployments, and store state.
Run Tasks is a paid add-on.</description>
    </item>
    
    <item>
      <title>GitHub Application</title>
      <link>/terraform/40_module_two/2004_github_application.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2004_github_application.html</guid>
      <description>Integrating Bridgecrew with GitHub In this section, you’ll add a GitHub integration to automatically generate pull request comments and set up for automated fix pull requests (PRs) in the next section. This integration also provides native and automated scanning of incoming commits and pull requests.
Head back to the Bridgecrew Integrations tab and select GitHub under the Code Repositories section and click on the &amp;ldquo;GitHub organization&amp;rdquo; link:
Choose which accounts and repositories to grant the Bridgecrew GitHub integration access to:</description>
    </item>
    
    <item>
      <title>Test pull request</title>
      <link>/terraform/40_module_two/2005_kickoff_pr.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2005_kickoff_pr.html</guid>
      <description>Kick off a test pull request Check that all three integrations are working by kicking off a pull request. Go back to your fork of the TerraGoat repo and select &amp;ldquo;Add file&amp;rdquo; -&amp;gt; &amp;ldquo;Create new file.&amp;rdquo; Set the path to terraform/simple_instance/s3.tf. Add the following code:
provider &amp;#34;aws&amp;#34; { region = &amp;#34;us-west-2&amp;#34; } resource &amp;#34;aws_s3_bucket&amp;#34; &amp;#34;dockingbay&amp;#34; { bucket_prefix = &amp;#34;docking-bay-storage-&amp;#34; tags = { Name = &amp;#34;Docking Bay&amp;#34; Environment = &amp;#34;Dev&amp;#34; } } Select &amp;ldquo;Create a new branch&amp;rdquo; and &amp;ldquo;Propose new file.</description>
    </item>
    
  </channel>
</rss>
