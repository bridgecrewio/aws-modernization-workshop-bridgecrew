[{"uri":"/aws-modernization-workshop-bridgecrew/","title":"Cloud DevSecOps with Bridgecrew","tags":[],"description":"","content":" Welcome! In this workshop, you will learn how to save time, improve your security posture, and make your dev and security team\u0026rsquo;s lives easier!\nYou\u0026rsquo;ll do this by getting hands on and automating your infrastructure security from code to commit, using Brigecrew and the AWS developer tools suite to take up most of the strain!\nBut before we jump in blind, lets provide a little context!\nDevSecWhat? DevSecOps as a term gets banded about quite a lot, so what do we mean, and why should you care?\nTraditionally, development, operations and security teams were seperate, each with very specific responsabilities. However, with cloud providing self service, and the merging of development and operations teams, it\u0026rsquo;s now incredably common for development teams to deploy their own infrastructure, adding capacity and new technologies to rapidly bring new features and products online.\nWith this shift, often referred to as \u0026ldquo;DevOps\u0026rdquo;, two of those teams have merged, adopting development practices such as CI/CD, and source controlled manifests (gitops) to safley and repeatably manage, maintain and control cloud infrastructure deployments, and ultimatley, the team\u0026rsquo;s code/product/app/site.\nPerformance Benefits These two teams becoming one allows a single pipeline of automation which satisfies both the developers and operational concerns and needs for allowing code to make it into production. Once in place, this means developers can focus on features and fixes, rather than the often manual back and forth with operations teams, and the operations engineers in the team can ensure that requirements for testing, scaling and monitoring the infrastructure are baked into the release lifecycle.\nThe result; as many deploys a day as you want, more code, more fixes, more features in production quicker. less manual messing about.\nThe secutity elephant in the room With deployments to production now happening 10\u0026rsquo;s or potentially hundreds of times a day, and the development team in control of their own cloud infrastructure, a number of traditional security team concepts break down.\nFor example, AWS operates a \u0026ldquo;Shared Responsability\u0026rdquo; model with it\u0026rsquo;s users, pushing responsability for securing the infrastructure they deploy onto the development team.\nAlongside this, the rate of deployments, often onto containerised, lambdas, or other styles of \u0026ldquo;short lived\u0026rdquo; deployments make visibility, security monitoring and, security validation and breach detection complicated for a traditional security team.\nSecurity can also build requirements into the dev pipeline! In the same way as operations enineers can build their monitoring and alerting requirements into the development pipeline, security scanning and enfocement can be included too. DevSecOps is the term we use to describe this.\nYou may also be familiar with the term \u0026ldquo;Security Champion\u0026rdquo;, a member of the team with a passion and knowledge for ensuring secure practices within a DevOps team, DevSecOps is what happens when this security champion automates security best practices into the teams development pipelines, while working with the team to ensure understanding of why, and the importance of security visibility.\nIf you don\u0026rsquo;t have a Security Champion, consider the Bridgecrew platform a virtual one, we\u0026rsquo;ll show you how it takes the effort out of automating security insights into your environments!\nSecurity as a guardrail, not a roadblock! Just as many a developer and operations engineer would sigh, pre DevOps, when having to work with the other team, security is often seen as a decellerator, slowing down a features progression to production.\nHistorically, all of these teams had very different goals, which caused friction\nDevelopers Measured on new features, bugs fixed Operations Measured on stability of the production environment Security Measured on the security posture, acreditation and protecting the business. Within a DevSecOps team, responsabilities are understood and shared, while obviously an individuals focus may differ, a team moving forward a single unit, responsible for the total ownership of the deployment, allows for a more mindful approach.\nSecurity automated inside a teams DevOps pipeline can provide insight and early warnings to the team, without blocking or slowing down the productivity of the team, it gives the Security engineers early enough visibility into the development and infrastructure efforts, so that action can be taken, even fully automated which would historically be a prevention of deployment or rollback once in production, which is often where the impression of a roadblock came from.\nLets get started! Bridgecrew is committed to making the integration of security into every day developer tooling as simple, effective and painless as possible, lets show you how the Bridgecrew platform automates a lot of what we\u0026rsquo;ve just discussed, giving your developers cricual insights and tools to improve and maintain your security posture!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/5_getting_started.html","title":"Getting Started","tags":[],"description":"","content":" We appreciate the double-edged sword when it comes to testing cloud security tools, with no appetite to expose production code repositories to new tools right away. We\u0026rsquo;ve tried to make it super easy to follow this workshop by providing our own, purposley-vulnerable set of CloudFormation templates, so that you can scan and automate infrastructure code without the added friction of integrating your own code.\nLearning Objectives  Hands-on experience with both build-time and run-time configuration security and learn why addressing both leads to better security posture for your deployed infrastructure. Howto build a CI/CD pipeline with embedded policy governance enforced by security scanning tools. An insight into what happens if you don’t add infrastructure security to your pipeline because it’s always fun to break things!  Prerequisites  A basic understanding of git and github.com. An understanding of the role CI/CD pipelines play in a development lifecycle. Familiarity with AWS core concepts, such as IAM, regions, UI, CLI and API\u0026rsquo;s. The AWS command line installed on your machine, aws --version An AWS account in which you will create an AWS Codebuild and AWS Codepipeline temporary environment.  You can test the current credentials cofigured for your local aws cli with the aws sts get-caller-identity command.\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various Bridgecrew and AWS services can be architected to build a solution while demonstrating best practices along the way. These examples, especially the intentionally vulnerable \"CFNGoat\" repository, are not intended for use in production environments.  "},{"uri":"/aws-modernization-workshop-bridgecrew/5_getting_started/500_what_is_cloudformation.html","title":"What is CloudFormation?","tags":[],"description":"","content":" What is CloudFormation and Infrastructure as Code? AWS CloudFormation makes cloud provisioning simple and scalable by leveraging both automation and configuration as code. Defining your cloud infrastructure and applications as code simplifies repetitive DevOps tasks and gives you a single source of truth for app and environment configuration.\nThis makes it more important to make sure your infrastructure as code (IaC) resources follow security best practices—your CloudFormation configuration is now another part of your codebase, and should be tested and scanned for errors and risks just like any other code review.\nTracked, Versioned cloud resources CloudFormation lets you define your AWS infrastructure with templates, which you can check into version control or store in S3 buckets. CloudFormation templates are JSON or YAML files. For instance, the following template defines an S3 bucket:\n{ \u0026#34;AWSTemplateFormatVersion\u0026#34; : \u0026#34;2010-09-09\u0026#34;, \u0026#34;Description\u0026#34; : \u0026#34;AWS CloudFormation Sample Template: Sample template showing how to create a publicly accessible S3 bucket.\u0026#34;, \u0026#34;Resources\u0026#34; : { \u0026#34;S3Bucket\u0026#34; : { \u0026#34;Type\u0026#34; : \u0026#34;AWS::S3::Bucket\u0026#34;, \u0026#34;Properties\u0026#34; : { \u0026#34;AccessControl\u0026#34; : \u0026#34;PublicRead\u0026#34;, \u0026#34;WebsiteConfiguration\u0026#34; : { \u0026#34;IndexDocument\u0026#34; : \u0026#34;index.html\u0026#34;, \u0026#34;ErrorDocument\u0026#34; : \u0026#34;error.html\u0026#34; } }, \u0026#34;DeletionPolicy\u0026#34; : \u0026#34;Retain\u0026#34; } }, \u0026#34;Outputs\u0026#34; : { \u0026#34;WebsiteURL\u0026#34; : { \u0026#34;Value\u0026#34; : { \u0026#34;Fn::GetAtt\u0026#34; : [ \u0026#34;S3Bucket\u0026#34;, \u0026#34;WebsiteURL\u0026#34; ] }, \u0026#34;Description\u0026#34; : \u0026#34;URL for website hosted on S3\u0026#34; }, \u0026#34;S3BucketSecureURL\u0026#34; : { \u0026#34;Value\u0026#34; : { \u0026#34;Fn::Join\u0026#34; : [ \u0026#34;\u0026#34;, [ \u0026#34;https://\u0026#34;, { \u0026#34;Fn::GetAtt\u0026#34; : [ \u0026#34;S3Bucket\u0026#34;, \u0026#34;DomainName\u0026#34; ] } ] ] }, \u0026#34;Description\u0026#34; : \u0026#34;Name of S3 bucket to hold website content\u0026#34; } } } You can create this bucket in seconds using the AWS CLI (not required for the workshop):\naws cloudformation create-stack --stack-name myexamplestack --template-body file:///home/example/mytemplate.json The benefit of using CloudFormation to define your infrastructure is that it allows you to audit the templates before they are deployed. Finding potential security issues before the infrastructure becomes real, you’re now able to bake best practices for security into your development and deployment lifecycle.\nWith Bridgecrew, you can automate the scanning of your IaC codebase and deployed resources, find misconfigurations, and fix issues fast.\nWe\u0026rsquo;ll walk through the process of configuring Bridgecrew to scan a CloudFormation deployment, run the scans, find issues, and fix them!\nThats enough context, hit next to get started! "},{"uri":"/aws-modernization-workshop-bridgecrew/5_getting_started/501_setting_up_bridgecrew_account.html","title":"Setup your Bridgecrew account","tags":[],"description":"","content":" Setup your Bridgecrew account CloudFormation gives us total control to create, change, and delete resources in AWS. With CloudFormation, it\u0026rsquo;s easy to pick and deploy any of the hundreds of templates readily available from the AWS sample templates. Because these templates are built solely with functionality in mind, it\u0026rsquo;s also easy to forget important security configuration and end up having an insecure service running in production.\nThat’s why scanning your CloudFormation templates before deployment is so important. Bridgecrew integrates into your workflow and stops security issues before they can do any harm.\nTo get started, check that you have the following prerequisites:\n Python3 and \u0026lsquo;pip\u0026rsquo;\n$ python3 -V Python 3.8.6 $ pip3 -V pip 20.2.3 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) An AWS account and an IAM user that can make programmatic calls.\ncat ~/.aws/credentials [default] aws_access_key_id = ABCDEFGHIJKLMNOPQRSTUVWXYZ1 aws_secret_access_key = awssecretkeystring A Bridgecrew account.\nYou can create one for free, here!\n The Bridgecrew client CLI.\nThe CLI works on Windows, Mac, and Linux. You can install it with pip.\npip3 install bridgecrew If you run into problems, try the alternate install instructions.\n  "},{"uri":"/aws-modernization-workshop-bridgecrew/5_getting_started/502_set_up_git.html","title":"Setup git","tags":[],"description":"","content":" Check your local git installation To ensure your local git client is setup correctly, try the following commands, you should not receive an error from any of them, and end up with a copy of our \u0026lsquo;vulnerable by design\u0026rsquo; training project \u0026ldquo;CFNGoat\u0026rdquo; on your machine, which we\u0026rsquo;ll use later!\ngit clone https://github.com/bridgecrewio/cfngoat.git cd cfngoat git status Sample output:\n$ git clone https://github.com/bridgecrewio/cfngoat.git cd cfngoat git status Cloning into \u0026#39;cfngoat\u0026#39;... remote: Enumerating objects: 64, done. remote: Counting objects: 100% (64/64), done. remote: Compressing objects: 100% (54/54), done. remote: Total 64 (delta 18), reused 33 (delta 7), pack-reused 0 Unpacking objects: 100% (64/64), 73.62 KiB | 718.00 KiB/s, done. On branch master Your branch is up to date with \u0026#39;origin/master\u0026#39;. nothing to commit, working tree clean ➜ cfngoat git:(master)"},{"uri":"/aws-modernization-workshop-bridgecrew/10_module_one.html","title":"One | Finding CloudFormation misconfigurations locally","tags":[],"description":"","content":" Finding cloud misconfigurations and policy violations in AWS resources and CloudFormation code Module Learning Objectives  Creating a demo CloudFormation repository using GitHub by cloning CFNGoat. Scan a CloudFormation template for misconfigurations locally.  Analyzing CloudFormation configuration with Bridgecrew In this module, we’ll start by testing Bridgecrew CLI with the CfnGoat template, Bridgecrew’s vulnerable-by-design project created to help demonstrate common errors and security best practices in AWS CloudFormation.\nYou already cloned the CFNGoat repository in the getting started module, however if you need to do so again, use the following:\ngit clone https://github.com/bridgecrewio/cfngoat.git cd cfngoat git status"},{"uri":"/aws-modernization-workshop-bridgecrew/10_module_one/1001_bridgecrew_api_key.html","title":"Your Bridgecrew API Key","tags":[],"description":"","content":" Your Bridgecrew API Key To run the Bridgecrew CLI we installed with pip3 earlier, you’ll need an API token from your bridgecrew account.\nTo get it, go here! (https://www.bridgecrew.cloud/integrations/api-token) or, when logged into the bridgecrew console, go to Integrations \u0026gt; API Token and copy the token provided!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/10_module_one/1002_local_scan_cli.html","title":"Bridgecrew CLI","tags":[],"description":"","content":" Scan a repo locally with the bridgecrew CLI We use the Bridgecrew API token to connect our local Bridgecrew CLI with the Bridgecrew cloud, the following command will scan the CFNGoat repository we cloned for infrastructure vulnerabilitues and display any issues and violations.\nThe API key also sends these results to the Bridgecrew cloud for so we can track, inspect in more detail and remediate them there, we\u0026rsquo;ll cover this a little later.\nbridgecrew -f cfngoat.yaml --bc-api-key YOUR_API_KEY_HERE\nYou can also scan entire directories with -d:\nbridgecrew -d cfn --framework cloudformation --bc-api-key YOUR_API_KEY_HERE\nMake sure you are in the `cfngoat` directory we checked out from git during the getting started section  The results show all the failed checks, as well as link to a guide explaining the cause and how to fix them. Note the output also includes the filename and snippet of code that is misconfigured:\nBridgecrew comes pre-built with hundreds of AWS security and compliance policies. To get the list of security checks, use -l or \u0026ndash;list:\nbridgecrew --list\nIn many instances, when testing locally with the CLI, like now, you may only be interested in running a select few checks. In that case, you can add the -c or \u0026ndash;check option:\nbridgecrew -f cfngoat.yaml -c CKV_AWS_1,CKV_AWS_2 --bc-api-key YOUR_API_KEY_HERE\nOr, if you want to run all but some checks, use the \u0026ndash;skip-check option: bridgecrew -f cfngoat.yaml --skip-check CKV_AWS_1,CKV_AWS_2 --bc-api-key YOUR_API_KEY_HERE\nNext, we\u0026rsquo;ll inspect these results in the Bridgecrew dashboard!\nYou can use the bridgecrew CLI without --bc-api-key, the results will still display locally, without uploading to the bridgecrew cloud, for testing or local-only scans.  "},{"uri":"/aws-modernization-workshop-bridgecrew/10_module_one/1003_local_scan_dashboard.html","title":"Bridgecrew Dashboard","tags":[],"description":"","content":" Viewing our results in the Bridgecrew Dashboard If we access the Bridgecrew dashboard at https://bridgecrew.cloud we will see statistics for the configuration issues and policy violations found by the Bridgecrew CLI in our cfngoat repository, feel free to explore the dashboard, then click onto the \u0026ldquo;Incidents\u0026rdquo; tab on the left navigation bar to drill down and explore the reported issues we saw on the CLI output in more details.\nOnce in the Incidents view, you\u0026rsquo;ll see each violation, clicking into one of the violations will group all resources found in our CloudFormation manifests which violates that policy.\nFrom here, we can click on a specfic CloudFormation object to see the relevant peice of code, and any offered remediation suggestions, which we\u0026rsquo;ll cover in more depth with an automated setup a little later!\nNow we\u0026rsquo;ve seen some of our own data in the Bridgecrew dashboard some of the the insights provided, lets have a look how we make this real! \u0026hellip;Automated scanning of any changes, without manually running a CLI tool\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two.html","title":"Two | Automating detection and enforcement","tags":[],"description":"","content":" Preventing cloud security issues from being deployed through automated policy enforcement Module Learning Objectives  Setting up AWS CodeBuild Setting up AWS CodePipeline Adding Bridgecrew scanning of CloudFormation manifests into CodeBuild Reviewing buildtime misconfigurations with Bridgecrew Automating fixes and verification through pull requests  Integrating Bridgecrew with AWS dev tools suite In the previous section, we used the Bridgecrew CLI to do some quick scanning before committing a change into the code repository. However, forcing every developer to run a scan in their machines ad hoc isn’t conducive. We need a smarter approach, one that continuously audits code.\nBridgecrew supports all popular version control systems and CI/CD platforms. We can, for instance, set up Bridgecrew to run every time a developer commits into a GitHub repository.\nThis section will show you how to continuously scan CloudFormation templates by integrating Bridgecrew with AWS DevOps tooling, AWS CodeBuild and AWS CodePipeline.\nThe integration takes three steps:\n Create your own CFNGoat fork on Github. Configure CodeBuild to audit your code. Set up CodePipeline to rerun the audit on every change.  "},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2001_automating_iac_github.html","title":"Fork your own CFNGoat","tags":[],"description":"","content":" Create your own CFNGoat fork on Github Since CFNGoat is already hosted on github, lets create our own fork so we can make changes and integrate our automated pipeline.\nVisit the CFNGoat repo at (https://github.com/bridgecrewio/cfngoat)\nLogin to github.com if you are not already authenticated, and click the Fork button for the CFNGoat repository.\nIf you have multiple organisations, github will ask which of your orgs to fork into, chose your personal account (your username in the list) to fork the repo.\nYou\u0026rsquo;ll then be redirected to your own fork, notice your username at the top of the page:\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2002_automating_iac_codebuild.html","title":"Setup AWS Codebuild","tags":[],"description":"","content":" Setup AWS CodeBuild for our CFNGoat fork. AWS CodeBuild, paired with AWS CodePipeline is a CI/CD platform that can build projects, run jobs, and deploy infrastructure. We’re going to use it to scan the CloudFormation templates before deployment, allowing us to fail the build job and halt a deployment if there are any security violations in our CloudFormation code.\nWe\u0026rsquo;ll also send the results to the Brigecrew dashboard automatically, in order to maintain a view across all of our infrastructure projects and share visability throughout our organisation.\nFirst, tell the Bridgecrew dashboard you\u0026rsquo;re going to integrate AWS CodeBuild. To do this, open the integrations menu in your Bridgecrew account and select AWS Code Build, then \u0026ldquo;Add Subscription\u0026rdquo;\nRun the command with your local aws cli as shown, this will save the Bridgecrew API key into your AWS System Manager\u0026rsquo;s parameter store, so we can access it from our CodeBuild jobs later.\nAlso, copy the buildspec.yaml configuration to somewhere handy (or keep this bridgecrew tab open) we\u0026rsquo;ll need it in just a little while.\nIf the aws command fails, your IAM user may not have the correct permissions to create parameters in AWS Systems Manager (SSM). In that case, you’ll need to add write permissions to the user.  New Codebuild Project Now go to your AWS CodeBuild service and select Create a Build Project:\nProject Name: bridgecrew-tutorial\nDescription: Automating IaC Security scanning with Bridgecrew and AWS\nUnder the Source section, choose Github in the Source Provider dropdown, then Connect using OAuth, finally, press the Connect to Github button and follow the authorization process to your github account as below.\nNow the Source section will have changed, allowing us to select our CFNGoat repository from github, you\u0026rsquo;ll be able to scroll through a list of your Github repositories to find it:\nUnder Environment Image, select Managed Image. Then select Ubuntu, standard, the latest numbered image (aws/codebuild/standard:4.0 at the time of writing) and select always use the latest from image version. Finally, set environment type to Linux if not already set, your setup should mirror the image below.\nAdding our Buildspec from the Bridgecrew Dashboard Next comes the build spec. Select Insert Commands, then click Switch to Editor and paste the YAML code you copied from the Bridgecrew Dashboard earlier. Overwrite the previous contents completely.\nWe\u0026rsquo;ve Completed our CodeBuild project setup! Select Create Build Project to finalize!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2003_automating_iac_codebuild_iam.html","title":"Edit IAM for Codebuild","tags":[],"description":"","content":" Edit AWS IAM permissions to enable CodeBuild CodeBuild creates an IAM role for running builds, however, we need CodeBuild to access our Bridgecrew API secret we stored in system manager, so we\u0026rsquo;ll need to add some more permissions to the IAM role.\nIn the AWS IAM Dashboard, find the role, it will be called codebuild-bridgecrew-tutorial-service-role unless you renamed the CodeBuild project we\u0026rsquo;ve just set up.\nSelect the role, then click select Add Inline Policy from the right hand side (it\u0026rsquo;s a text link, not a button, so not the easiest thing to spot!).\nThis will bring up the Create Policy Visual Editor, for Service, select Systems Manager in the search box.\nThen chose the GetParameters and GetParameter Actions.\nScroll down, and under Resources, choose Specific. Select Add ARN. Fill in the region you\u0026rsquo;ve created your CodeBuild project, and leave the account number as the default. and account number. Type bridgecrew_api_key as the parameter name, to match the name we gave the key in the aws cli command we used earlier.\nSelect Add, then Review Policy and click Create policy\nWe\u0026rsquo;re now ready to tie this all together with AWS CodePipeline!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2004_automating_iac_codepipeline.html","title":"Setup AWS CodePipeline","tags":[],"description":"","content":" Setting up CodePipeline to automatically trigger scans If you want CodeBuild to run the scan automatically on each new commit in your CFNGoat Github repository, you’ll need to configure AWS CodePipeline. You can skip this step, but if you do, you’ll only be able to run manual scans from the CodeBuild UI, AWS CLI, or API\u0026rsquo;s, which doesn\u0026rsquo;t provide us the DevSecOps automation we\u0026rsquo;re looking for!\nTo set it up, go to AWS CodePipeline and select Create Pipeline:\nAfter giving the pipeline a name, select Next and choose Github (Version 2) as a source provider.\nAs CodeBuild and CodePipeline are different tools, we\u0026rsquo;ll also need to authorize CodePipeline to your GitHub account, select Connect to Github and follow the authorization redirects in the popup window.\nGive the Github Connection a name:\nSelect which Github Repositories you want CodePipeline to receive events for, in this case, i\u0026rsquo;ve just selected the CFNGoat repository.\nClick Install a new app to finalize the Github integration, then click Connect\nThe CodePipeline screen should refresh with a green Sucessfully connected to GitHub message:\nNow CodePipeline has access to our github repo, we can select it as the pipeline source, as below, we also select the master (or main branch), to have our pipeline run when commits to this branch occur.\nInstruct CodePipeline to trigger our CodeBuild When CodePipeline see\u0026rsquo;s a new commit in our Github repository, it will trigger a build action, in our case, we want this to be our CodeBuild setup, select the same region as the CodeBuild project, then select the CodeBuild project name, bridgecrew-tutorial.\nLeave the default of Single Build selected and select\nClick Next then Skip Deploy Stage on the next screen, we don\u0026rsquo;t want to deploy our CFNGoat CloudFormation to AWS as we\u0026rsquo;re just highlighting howto stop a build progressing if there are Security Violations!\nFinally, ** Create Pipeline ** on the review page:\nThe Pipeline will immediatley run! Hit next to explore our new automated CI/CD Setup!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2005_automating_iac_results.html","title":"Pipeline Results","tags":[],"description":"","content":" Viewing our Pipeline results and Security Posture. Our new CodePipeline will immediatley start running our CodeBuild job against the latest commit in our GFNGoat Repository.\nYou will be taken to the Pipeline Jobs page, where you will see the progress as CodeBuild checks out the latest commit from Github, then starts our job to run Bridgecrew against the CloudFormation.\nIf everything goes well, the pipeline should fail at the build stage. This is normal as the CFNGoat code is purposely designed with security flaws. Once the issues are fixed, the pipeline status should turn to green.\nThis allows us to prevent vulnerable infrastructure making it to any AWS account, be it test or prod, preventing security issues for your team and organisation before they happen, and helping to satisfy the requirements of the AWS Shared Responsability Model\nBelow we see the Pipeline sucessfully created and starting to run:\nOur buld will fail, blocking the vulnerable infrastructure code from making it to any \u0026ldquo;Deploy\u0026rdquo; steps we configure in CodePipeline.\nUnder Build \u0026gt; Failed \u0026gt; Just Now, click details\nHere we are provided a link to our build logs, revealing the security violations and why Bridgecrew blocked the build. Now we don\u0026rsquo;t need to manually run the bridgecrew CLI, our developers get a bridgecrew scan every time they commit!\nNavigating to Codebuild \u0026gt; Report Group, we can also see a simple graph of failed vs passed checks with an easier to read output of all failed checks.\n\u0026ldquo;AWS CodeBuild JUnit output)\nData is good, easy to visualize data is better. While the output above is very useful, you may want to visualise issues over time with a given repository, or group objects affected by the same issue into one group for clearer understanding.\nYou also may not want developers having direct access to the AWS account, so viewing these of these logs could be constrained.\nFor all of these reasons and more, the pipeline automatically sends results to your Bridgecrew dashboard, where the issues can be correlated and visualized over time. This also allows you to provide security posture visibility to other people in the team or wider organisation (such as an enterprise security team), without needing to manage further IAM access to the AWS accounts.\nInvestigating security violations in Bridgecrew You will notice, our AWS Code Build integration has gone green in the Bridgecrew Dashboard, and we\u0026rsquo;ve received data. You can see the AWS account ID and the name of our CodeBuild pipeline, received from our CodeBuild job!\nClicking into Incidents, you\u0026rsquo;ll see a all of the issues, the same ones reported in the CodeBuild logs, but with resources grouped by issue and a lot more information and context, such as severity and Guidelines on the underlying security issue!\nYou can also filter to just the issues reported from your CodeBuild pipeline by pipeline and account name, if you already have numerous data sources integrated:\nClicking on a specific resource provides code insights and the resource details, We\u0026rsquo;ll cover remediation and automated fixes in the next module!\nBridgecrew also provides at a glance dashboards, providing historical trends and collated information from all of your monitoring sources, such as multiple CodeBuild pipelines, AWS runtime issues and more!\nCongratulations! You\u0026rsquo;ve just automated security scanning of your Infrastructure-as-Code into a developer friendly CI/CD pipeline, and exposed easy to comprehend visualisations of issues which can be easily shared with your organisation to enforce trust and security posture.\nIn the next module, we\u0026rsquo;ll look at howto fix these issues, as well as providing more tips for integrating security into the developer workflow, without causing friction.\n"},{"uri":"/aws-modernization-workshop-bridgecrew/30_module_three.html","title":"Three | Automate Fixes &amp; Runtime Scanning","tags":[],"description":"","content":" Fixing issues quickly with security-as-code to improve your cloud security posture As we’ve shown so far, Bridgecrew provides the policies and workflow to audit your CloudFormation templates before deployment, and optionally to block vulnerabilities making it to your deployment pipeline.\nHowever two questions still remain!\nQuestion One  What about fixing the descovered issues in an automated, auditable fashion.  Question Two  What about infrastructure that\u0026rsquo;s already running, and maybe wasn\u0026rsquo;t deployed via Infrastructure as Code?\n  In this module, we\u0026rsquo;ll look to solve both of these, by Integrating Github automated pull requests, and runtime scanning of your AWS account!\nModule Learning Objectives  Enable runtime security scanning of your AWS account with Bridgecrew Automating fixes through remediation Pull Requests and Github Gain insights against compliance benchmarks Use the bridgecrew dashboard to monitor cloud security posture over time  "},{"uri":"/aws-modernization-workshop-bridgecrew/30_module_three/3001_bridgecrew_automate_add_runtime.html","title":"Automate Fixes through Pull Requests","tags":[],"description":"","content":" Automate Fixes Through Pull Requests By adding another Intgration into Bridgecrew, we can generate automated Pull Requests (PR\u0026rsquo;s) into your Github repository, to update your CloudFormation manifests and fix security issues!\nTo do this, we\u0026rsquo;ll use the \u0026ldquo;Github\u0026rdquo; Source Control integration within the Bridgecrew Dashboard, allowing Bridgecrew to raise pull requests (and also, scan incoming pull requests automatically for issues!)\nJust like the previous AWS Github authorization, you can choose which repositories to give Bridgecrew permission to access. In this case, a minimum of your CFNGoat fork is required if you\u0026rsquo;re following along with the workshop!\nOnce authorized, we will Bridgecrew will scan your Infrastructure as Code manifests in the repositories for CloudFormation, AWS CDK, Terraform, Serverless Framework, ARM, and Kubernetes manifests, adding issues found to the Incidents page and Dashboards\nYou may need to check your filters on the incidents page to see all relevant scanning sources. In the following filter, i\u0026rsquo;ve selected the information source coming from our bridgecrew-tutorial CodePipeline, and also the newly added metahertz/cfngoat source from the Github integration.\nYou will now see the same violation alerting from two sources, the source Github repository itself, and the latest CodePipeline run, from Module Two of this workshop!\nFind the Ensure S3 bucket has \u0026lsquo;restrict_public_bucket\u0026rsquo; enabled violation in your dashboard, as in the example below:\nWhen we click on one of the Github-integrated violations, we\u0026rsquo;ll see the platform recommending an automated fix in the form of a visual diff, lets fix the Financials bucket, click on \u0026lt;yourgithubusername\u0026gt;/cfngoat: Bucket.FinancialsBucket as shown below:\nIf you are happy with the proposed fix (See our guidelines tab for more developer-friendly context if needbe) you can tick the resource name above the diff, and click Remediate.\nThe remediation popout shows there will be a Pull Request raised against your Github repository, hit REMEDIATE.\nAfter a couple of seconds, you\u0026rsquo;ll be taken back to the Incidents screen, with a message confirming the Pull Request has been sucessfully raised, you\u0026rsquo;ll also see the remediation has had the effect of hiding the issue from the Incidents list (other buckets are listed, but Financials is gone).\nHowever, notice the issue is still present from our CodePipeline source, so we\u0026rsquo;re not secure yet!\nOver at our CFNGoat repository in Github, we will see a new PR under \u0026ldquo;Pull Requests\u0026rdquo;, which the development team can review:\nAnd Merge!\nBringing it all together. Why have two reports of the same issue? One from Git and one from our CodePipeline run?\nIt\u0026rsquo;s important to track security posture at multiple steps in the DevOps lifecycle, and Bridgecrew lets us do just that!,\nMerging our Pull Request in Github triggers our CI/CD deployment in AWS CodePipeline from Module Two\u0026hellip;.\nYou may be able to tell where this is going!\nNotice our merged pull request commit has triggered the Pipeline:\nThe scan will still fail, as there are more than one security issues affecting the CFNGoat repository, However! Lets go and look at our Bridgecrew dashboard again!\u0026hellip;.\nThe AWS Codepipeline integration has also seen the change and removed the alert for our FinancialsBucket, Now we know that the issue is not only fixed at source, but that the fix has also made it through the CI/CD pipeline into production!\nCongratulations! You\u0026rsquo;ve built an automated Infrastructure as Code scanning solution, in a live environment, and automated the fixing of an exposed S3 bucket! Maybe it\u0026rsquo;s time for a victory coffee?\n"},{"uri":"/aws-modernization-workshop-bridgecrew/categories.html","title":"Categories","tags":[],"description":"","content":""},{"uri":"/aws-modernization-workshop-bridgecrew/tags.html","title":"Tags","tags":[],"description":"","content":""}]