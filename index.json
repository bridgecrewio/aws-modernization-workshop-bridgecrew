[{"uri":"/aws-modernization-workshop-bridgecrew/","title":"Cloud DevSecOps with Bridgecrew","tags":[],"description":"","content":" Welcome! In this workshop, you’ll learn how to leverage infrastructure as code (IaC) and DevSecOps to automate your cloud security efforts. If you’re interested in making cloud security more efficient, proactive, and accessible to developers, this workshop is for you!\nUsing Bridgecrew, GitHub, AWS CodeBuild, and AWS CodePipeline, you’ll get hands-on experience implementing an automated CloudFormation security and compliance workflow.\nLearning Objectives  Overview of DevSecOps and CloudFormation infrastructure as code (IaC) Getting started with Bridgecrew to scan for CloudFormation misconfigurations Setting up your CI/CD pipeline to automate security scanning and policy enforcement Fixing IaC security errors and AWS resource misconfigurations with Bridgecrew  Before we dive in, let’s go through a refresher on the core concepts explored in this workshop.\n"},{"uri":"/aws-modernization-workshop-bridgecrew/5_getting_started.html","title":"DevSecWhat?","tags":[],"description":"","content":" DevSecWhat? The foundation of DevSecOps lies in the DevOps movement, wherein development and operations functions have merged to make deployments faster, safer, and more repeatable. Common DevOps practices include automated infrastructure build pipelines (CI/CD) and version-controlled manifests (GitOps) to make it easier to control cloud deployments. By baking software and infrastructure quality requirements into the release lifecycle, teams save time manually reviewing code, allowing them to focus more on shipping features.\nAs deployments to production speed up, however, many traditional cloud security concepts break down. With the rise of containerized technologies, serverless functions, and IaC frameworks (which we’ll dig into in the next section), it’s harder to maintain cloud security posture visibility.\nBy leveraging DevOps foundations, security and development teams can build security scanning and policy enforcement into automated pipelines. The ultimate goal with DevSecOps is to “shift cloud security left.” That means automating it and embedding it earlier into the development lifecycle so that actions can be taken earlier. Preventing risky deployments is a more proactive approach to traditional cloud security that often slows down development teams with deployment rollbacks and disruptive fixes.\nFor DevSecOps to be successful for teams working to build and secure infrastructure, embracing existing tools and workflows is critical. At Bridgecrew, we’re committed to making it as simple, effective, and painless as possible to automate cloud security and integrate it seamlessly into release lifecycles.\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various Bridgecrew and AWS services can be architected to build a solution while demonstrating best practices along the way. These examples, especially the intentionally vulnerable \"CFNGoat\" repository, are not intended for use in production environments.  "},{"uri":"/aws-modernization-workshop-bridgecrew/5b_what_cloudformation.html","title":"CloudFormation Overview","tags":[],"description":"","content":" How do CloudFormation and infrastructure as code work? Infrastructure as code (IaC) frameworks such as AWS CloudFormation, Terraform, and Pulumi make cloud provisioning simple and scalable by leveraging automation and code. Defining your cloud infrastructure in code simplifies repetitive DevOps tasks and gives you a single source of truth for your app and environment configuration.\nAWS CloudFormation enables you to define your AWS infrastructure with templates, which you can check into version control or store in S3 buckets. CloudFormation templates are JSON or YAML files. For instance, the following template defines an S3 bucket:\n{ \u0026#34;AWSTemplateFormatVersion\u0026#34; : \u0026#34;2010-09-09\u0026#34;, \u0026#34;Description\u0026#34; : \u0026#34;AWS CloudFormation Sample Template: Sample template showing how to create a publicly accessible S3 bucket.\u0026#34;, \u0026#34;Resources\u0026#34; : { \u0026#34;S3Bucket\u0026#34; : { \u0026#34;Type\u0026#34; : \u0026#34;AWS::S3::Bucket\u0026#34;, \u0026#34;Properties\u0026#34; : { \u0026#34;AccessControl\u0026#34; : \u0026#34;PublicRead\u0026#34;, \u0026#34;WebsiteConfiguration\u0026#34; : { \u0026#34;IndexDocument\u0026#34; : \u0026#34;index.html\u0026#34;, \u0026#34;ErrorDocument\u0026#34; : \u0026#34;error.html\u0026#34; } }, \u0026#34;DeletionPolicy\u0026#34; : \u0026#34;Retain\u0026#34; } }, \u0026#34;Outputs\u0026#34; : { \u0026#34;WebsiteURL\u0026#34; : { \u0026#34;Value\u0026#34; : { \u0026#34;Fn::GetAtt\u0026#34; : [ \u0026#34;S3Bucket\u0026#34;, \u0026#34;WebsiteURL\u0026#34; ] }, \u0026#34;Description\u0026#34; : \u0026#34;URL for website hosted on S3\u0026#34; }, \u0026#34;S3BucketSecureURL\u0026#34; : { \u0026#34;Value\u0026#34; : { \u0026#34;Fn::Join\u0026#34; : [ \u0026#34;\u0026#34;, [ \u0026#34;https://\u0026#34;, { \u0026#34;Fn::GetAtt\u0026#34; : [ \u0026#34;S3Bucket\u0026#34;, \u0026#34;DomainName\u0026#34; ] } ] ] }, \u0026#34;Description\u0026#34; : \u0026#34;Name of S3 bucket to hold website content\u0026#34; } } } Using the AWS CLI, you can provision the above bucket in seconds: (This is an example, not required for the workshop)\naws cloudformation create-stack --stack-name myexamplestack --template-body file:///home/example/mytemplate.json Security and CloudFormation IaC The benefit of using CloudFormation to define your AWS infrastructure is that it allows you to audit templates before they’re deployed. That will enable you to bake security best practices into your development and deployment lifecycle and finding potential security and compliance issues before the infrastructure becomes real.\nCloudFormation gives us total control to create, change, and delete resources in AWS. With CloudFormation, it’s easy to pick and deploy any of the hundreds of templates readily available from the AWS sample templates. Because these templates are built solely with functionality in mind, it’s also easy to forget important security configuration and end up having an insecure service running in production.\nThat’s why scanning your CloudFormation templates for vulnerable infrastructure before deployment is so important. With Bridgecrew, you can automate the scanning of your IaC codebase and cloud resources to both find and fix misconfigurations.\nIn this workshop, we’re doing exactly that. So let’s get started!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/6_prerequisites.html","title":"Prerequisites","tags":[],"description":"","content":" Before we get started, make sure you have the following prerequisites. To get the most out of this tutorial, it will also be helpful to have a basic understanding of git, AWS core concepts (IAM, regions, UI, CLI, APIs), and CI/CD principles.\nGit git --version If you don’t have git installed, do so here.\nGitHub account If you don’t have a GitHub account, please sign up for one here.\nAWS account If you are at an AWS event where the AWS Event Engine is being used, please click here.\nFor this tutorial, you’ll need an AWS account and an IAM user that can make programmatic calls.\ncat ~/.aws/credentials [default] aws_access_key_id = ABCDEFGHIJKLMNOPQRSTUVWXYZ1 aws_secret_access_key = awssecretkeystring AWS CLI aws --version You can test the current credentials configured for your local aws cli with the aws sts get-caller-identity command.\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various Bridgecrew and AWS services can be architected to build a solution while demonstrating best practices along the way. These examples, especially the intentionally vulnerable \"CFNGoat\" repository, are not intended for use in production environments.  "},{"uri":"/aws-modernization-workshop-bridgecrew/6_prerequisites/601_setting_up_bridgecrew_account.html","title":"Bridgecrew setup","tags":[],"description":"","content":" Bridgecrew setup You’ll need to sign up for a free Bridgecrew account to follow along with this tutorial. You can sign up for a free account here.\nBridgecrew CLI In this tutorial, we’re also going to use Bridgecrew CLI. The CLI works on Windows, Mac, and Linux. You can install it with pip:\npip3 install bridgecrew If you run into problems, try the alternate install instructions.\nBridgecrew API token Throughout the tutorial, you’ll need to use the Bridgecrew API token. You can access it here or in your Bridgecrew account by navigating to the Integrations tab and selecting API Token.\n"},{"uri":"/aws-modernization-workshop-bridgecrew/10_module_one.html","title":"Module 1 - Scan","tags":[],"description":"","content":" In this module, we’ll identify common misconfigurations and security best practices in AWS CloudFormation.\nModule Learning Objectives  Creating a demo CloudFormation repository using GitHub by cloning CfnGoat Scan a CloudFormation template for misconfigurations locally Investigate security and compliance errors using Bridgecrew  "},{"uri":"/aws-modernization-workshop-bridgecrew/10_module_one/1002_local_scan_cli.html","title":"Bridgecrew CLI","tags":[],"description":"","content":" Run Bridgecrew CLI locally To demonstrate what kinds of security and compliance errors Bridgecrew can identify in CloudFormation templates, we’ll start by using Bridgecrew CLI and send the results to the Bridgecrew platform.\nMake sure you are in the cfngoat directory from the previous step, copy your unique Bridgecrew API token, and scan the cfngoat.yaml file:\nbridgecrew -f templates/cfngoat.yaml --bc-api-key YOUR_API_KEY_HERE You can also scan entire directories with -d \u0026lt;path\u0026gt;:\nbridgecrew -d . --framework cloudformation --bc-api-key YOUR_API_KEY_HERE\nYou can use the bridgecrew CLI without --bc-api-key, the results will still display locally, without uploading to the bridgecrew cloud, for testing or local-only scans.  The results will show all the failed checks and link to a guide explaining the cause and how to fix them. Note the output also includes the filename and snippet of code that is misconfigured:\nAs you can see in the highlighted CLI output above, our demo CloudFormation repository has failing checks for two policies: - Ensure S3 bucket has ignore public ACLs enabled - Ensure S3 bucket has ‘restrict_public_bucket’ enabled\nTo get the list of policies that Bridgecrew checks for, use -l or –list:\nbridgecrew --list Bridgecrew policies In many instances, when testing locally with the Bridgecrew CLI, you may only be interested in running just a few checks. In that case, you can add the -c or --check option:\nbridgecrew -f cfngoat.yaml -c CKV_AWS_1,CKV_AWS_2 --bc-api-key YOUR_API_KEY_HERE Alternatively, if you want to run all but a few checks, use the --skip-check option:\nbridgecrew -f cfngoat.yaml --skip-check CKV_AWS_1,CKV_AWS_2 --bc-api-key YOUR_API_KEY_HERE Next, let’s inspect these results in the Bridgecrew dashboard.\n"},{"uri":"/aws-modernization-workshop-bridgecrew/10_module_one/1003_local_scan_dashboard.html","title":"Bridgecrew Dashboard","tags":[],"description":"","content":" Viewing results in Bridgecrew In the previous section, we scanned our demo CloudFormation repository locally and sent the results to the Bridgecrew platform for investigation and remediation.\nTo explore the reported issues we saw in the CLI output, head to the Incidents tab in your Bridgecrew account.\nBridgecrew comes with hundreds of out-of-the-box policies to help you adhere to cloud security best practices as defined by the Center of Internet Security (CIS). Bridgecrew policies also correspond to popular compliance frameworks such as PCI-DSS V3.2, NIST-800-53, SOC2, and more.\nClicking into one of the violations will show all the violating resources found in our vulnerable-by-design CfnGoat codebase.\nFor example\u0026hellip;\nFrom here, we can drill down into a specific CloudFormation object to see the relevant piece of code along with a suggestion for fixing the error. We’ll cover how to implement remediations in more depth a little later!\nNow that we have a feel for the kinds of IaC security issues Bridgecrew is equipped to find, let\u0026rsquo;s add some DevSecOps magic.\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two.html","title":"Module 2 - Automate","tags":[],"description":"","content":" MODULE 2 In the previous section, we used the Bridgecrew CLI to do some quick scanning before committing a change into the code repository. That’s great for checking work here and there but forcing every developer to run a scan on their machines before every single commit isn’t reasonable or feasible. To continuously audit code, automation and built-in workflows are key. With Bridgecrew, you can automate your infrastructure scanning along with the rest of your unit and integration testing by embedding it into your version control system and CI/CD pipeline.\nThis module will show you how to prevent cloud security issues from being deployed by integrating Bridgecrewwith the AWS developer tools suite.\nModule Learning Objectives  Creating your own CloudFormation demo repository on GitHub Setting up AWS CodeBuild Setting up AWS CodePipeline Adding Bridgecrew scanning of CloudFormation manifests into CodeBuild  "},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2001_automating_iac_github.html","title":"CloudFormation repository setup","tags":[],"description":"","content":" Creating your own CfnGoat repository on GitHub To set up our continuous workflow and demonstrate the value of getting automated infrastructure security scanning, we need a hosted source repository. You can either push your local demo repository to GitHub or, since CfnGoat is already hosted on GitHub, we recommend you fork the repository to your own GitHub account.\nHead to your GitHub account, visit the CfnGoat repository at https://github.com/bridgecrewio/cfngoat, and select Fork in the top right-hand corner:\nIf you have multiple organizations, GitHub will ask which of your orgs to fork into. Choose your personal account via your username in the list to fork the repo.\nYou’ll then be redirected to your newly forked repository—notice your username at the top of the page:\nNow we’re ready to make changes and integrate our automated pipeline!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2002_automating_iac_codebuild.html","title":"AWS CodeBuild setup","tags":[],"description":"","content":" Setting up AWS CodeBuild for our CloudFormation repository. AWS CodeBuild paired with AWS CodePipeline is a CI/CD platform that can build projects, run jobs, and deploy infrastructure. We’re going to use it to scan the CloudFormation templates before deployment, allowing us to fail the build job and halt a deployment if there are any security violations in our CloudFormation code.\nWe’ll also automatically send the results to Brigecrew to maintain a view across all of our infrastructure projects and share visibility throughout our organization.\nFirst, tell the Bridgecrew dashboard you’re going to integrate AWS CodeBuild. To do this, open the integrations menu in your Bridgecrew account and select AWS CodeBuild, then Add Subscription.\nRun the command provided by Bridgecrew with your local aws CLI. This will save the Bridgecrew API key into your AWS System Manager’s parameter store so we can access it from our CodeBuild jobs later.\nNext, copy the buildspec.yaml configuration to keep handy (or keep this Bridgecrew tab open).\nIf the aws command fails, your IAM user may not have the correct permissions to create parameters in AWS Systems Manager (SSM). In that case, you’ll need to add write permissions to the user.  New Codebuild Project Now go to your AWS CodeBuild service select Create a Build Project and name your project bridgecrew-tutorial.\nUnder the Source section, choose GitHub in the Source Provider dropdown and select Connect using OAuth. When you select Connect to GitHub, you’ll be prompted to authorize your GitHub account:\nNow the Source section will have changed, allowing us to search for and select our CfnGoat repository from GitHub:\nConfigure your Environment setup to mirror the image below:\nAdding our Buildspec To complete our build setup, we need to add the build commands. Select Insert build commands, and use the editor to overwrite the contents with the YAML code you copied from Bridgecrew earlier.\nSelect Create build project to finalize our CodeBuild project setup!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2003_automating_iac_codebuild_iam.html","title":"Edit IAM for CodeBuild","tags":[],"description":"","content":" Edit AWS IAM permissions to enable CodeBuild To give CodeBuild access to our Bridgecrew API secret we stored in AWS System Manager, we’ll need to add more permissions to the default IAM role created for new CodeBuild environments.\nIn the AWS IAM Dashboard, find the role called codebuild-bridgecrew-tutorial-service-role\nSelect the role, then click select Add Inline Policy from the right hand side.\nThis will bring up the \u0026ldquo;create policy visual editor\u0026rdquo;, for Service, select Systems Manager in the search box, then chose the GetParameters and GetParameter Actions.\nUnder Resources, choose Specific and select Add ARN. Fill in the same region you’ve created your CodeBuild project and leave the account number as the default. Type bridgecrew_api_key as the parameter name to match the name we gave the key in the aws CLI command we used earlier.\nSelect Add and once you’ve reviewed your new policy, Create policy:\nWe’re now ready to tie this all together with AWS CodePipeline!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2004_automating_iac_codepipeline.html","title":"AWS CodePipeline Setup","tags":[],"description":"","content":" Setting up AWS CodePipeline to automatically trigger scans To trigger CodeBuild to run the scan automatically on each new commit in your CfnGoat GitHub repository, we’ll need to configure AWS CodePipeline. You can skip this step, but if you do, you’ll only be able to run manual scans from the CodeBuild UI, AWS CLI, or APIs, which doesn’t provide the DevSecOps automation we’re looking for!\nTo set it up, go to AWS CodePipeline and select Create Pipeline:\nAfter giving the pipeline a name, select Next and choose Github (Version 2) as the source provider.\nAs CodeBuild and CodePipeline are different tools, you\u0026rsquo;ll also need to authorize CodePipeline to your GitHub account, select Connect to Github and follow the authorization redirects in the popup window.\nGive the Github Connection a name:\nSelect which Github Repositories you want CodePipeline to receive events for, in this case, i\u0026rsquo;ve just selected the CfnGoat repository.\nOnce you’ve authorized GitHub, select Install a new app to finalize the GitHub integration and select Connect:\nThe CodePipeline screen should refresh with a green Sucessfully connected to GitHub message:\nNow that CodePipeline has access to our GitHub repository, we can select it as the pipeline source. Select the master (or main branch) to have our pipeline run when commits to this branch occur:\nInstruct CodePipeline to trigger our CodeBuild When CodePipeline sees a new commit in our GitHub repository, it will trigger a build action. To set this to be our CodeBuild commands, select the same region as the CodeBuild project, then select the CodeBuild project, bridgecrew-tutorial.\nLeave the default of Single Build selected and select Next\nOn the next screen, select Skip deploy stage. We don’t want to deploy our CfnGoat CloudFormation to AWS as we’re just highlighting how to stop a build from progressing if there are security violations!\nFinally, select Create pipeline on the review page, which will trigger your new CodePipeline to immediately run against the latest commit in our CfnGoat repository:\nNow we don’t need to manually run the Bridgecrew CLI; your developers will get a Bridgecrew scan every time they commit!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/20_module_two/2005_automating_iac_results.html","title":"Pipeline Results","tags":[],"description":"","content":" Reviewing our pipeline results Your new CodePipeline will immediatley start running your CodeBuild job against the latest commit in your GFNGoat Repository.\nYou will be taken to the Pipeline Jobs page where you will see the progress as CodeBuild checks out the latest commit from GitHub and starts our job to run Bridgecrew against the CloudFormation configuration.\nBelow we see the Pipeline sucessfully created and starting to run:\nIf everything goes as intended, the pipeline should fail at the build stage since the CfnGoat code is purposely designed with security flaws. Only when the issues are fixed will the pipeline status turn to green.\nBy blocking the committed code from making it to any “Deploy” steps, we can prevent vulnerable infrastructure from making its way to any AWS account, be it test or prod and helping to satisfy the requirements of the AWS Shared Responsibility Model\nDig into the failed build Details and select the link to execution details:\nHere we are provided a link to our build logs, revealing the security violations and why Bridgecrew blocked the build:\nNavigating to Codebuild \u0026gt; Report Group, we can also see a simple graph of failed and passed checks with an easier-to-read output of all failed checks.\n\u0026ldquo;AWS CodeBuild JUnit output)\nCongratulations! You’ve just automated security scanning of your infrastructure as code into a developer-friendly CI/CD pipeline.\nIn the next module, we’ll look at how to investigate and fix these issues, as well as providing more tips for integrating security into the developer workflow without causing friction.\n"},{"uri":"/aws-modernization-workshop-bridgecrew/30_module_three.html","title":"Module 3 - Fix","tags":[],"description":"","content":" As we’ve shown so far, Bridgecrew provides the policies and workflow to audit your CloudFormation templates before deployment, and optionally, to block vulnerabilities from making their way to your deployment pipeline.\nIn this module, we’ll head back to the Bridgecrew platform to show how easy it can be to improve your cloud security posture with easy-to-understand visualizations and automated remediations.\nModule Learning Objectives  Investigating security violations in Bridgecrew Integrating Bridgecrew with GitHub Automating pull requests with GitHub Scanning runtime resources for vulnerable infrastructure  "},{"uri":"/aws-modernization-workshop-bridgecrew/30_module_three/3001_bridgecrew_dashboard_results.html","title":"Bridgecrew platform results","tags":[],"description":"","content":" Investigating security violations in Bridgecrew While the output from your CodeBuild run is very useful for quickly getting a sense of why your build failed, you may also want to visualize issues over time with a given repository or group objects affected by the same issue for clearer understanding.\nIf your developers don’t have direct access to the AWS account, the provided logs may be constrained.\nFor all those reasons and more, Bridgecrew provides reporting, monitoring, alerting, and visualizations for individual runs and across your entire infrastructure.\nHeading back to Bridgecrew, you’ll notice, our AWS CodeBuild integration has gone green showing that we’ve received data. You can also see the AWS account ID and the name of our CodeBuild pipeline received from our CodeBuild job!\nNavigating to the Incidents tab, you’ll see a list of all of the issues previously reported in the CodeBuild logs. If you select an item on the left-hand side, you’ll see all of the CloudFormation resources impacted by that issue.\nYou can also filter issues by severity, benchmarks, categories, and by source:\nSelecting a specific resource, you will see metadata such as commit details and a historical timeline, which includes all actions and changes made to the resource. Bridgecrew also shows the code configuration and lines that need to be addressed:\nRefresh the dashboard to see updated historical trends and collated information from all of your monitoring sources:\nBridgecrew goes a step further, making it easy for teams to investigate issues and get visibility into their cloud security posture. Hit next to learn how to address issues fast with automated security-as-code fixes!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/30_module_three/3002_bridgecrew_automate_integrate_github.html","title":"GitHub integration","tags":[],"description":"","content":" Integrating Bridgecrew with GitHub By adding another Bridgecrew integration, you can generate and push automated pull requests (PRs) back into your GitHub repository to update your CloudFormation code and fix security issues.\nHead back to the Bridgecrew IntegrationsBridgecrew Integrations tab and select the GitHub under the Source Control section.\nJust like we did for the AWS CodePipeline GitHub authorization, choose which accounts and repositories to grant Bridgecrew access to.\nOnce you’ve connected Bridgecrew to your CfnGoat demo repository, Bridgecrew will scan your CloudFormation code directly from GitHub again and bring the results into Bridgecrew.\nTo see all issues across your two scanning sources—your bridgecrew-tutorial CodePipeline and your newly integrated GitHub repository—you may need to check your filters on the Incidents page.\nYou will now see the same violation alerting from two sources. Although this may seem redundant, it’s actually an important feature for tracking security posture at multiple steps in the DevOps lifecycle.\n"},{"uri":"/aws-modernization-workshop-bridgecrew/30_module_three/3003_bridgecrew_automate_pr_remediation.html","title":"Pull request fixes","tags":[],"description":"","content":" Automating fixes through pull requests Now that you’ve pulled in multiple infrastructure sources, you might be getting overwhelmed at the prospect of fixing the several dozen issues Bridgecrew has identified. To help you implement fixes as fast as possible, Bridgecrew generates and pushes fix pull requests back into your GitHub repository.\nLet’s walk through the process with one of the policies we looked at earlier, Ensure S3 bucket has ‘restrict_public_bucket’ enabled:\nWhen we click on one of the GitHub-integrated violations, \u0026lt;yourgithubusername\u0026gt;/cfngoat: Bucket.FinancialsBucket, for example, we’ll see the platform recommending an automated fix in the form of a code diff:\nCheck out the Guidelines tab for more information on the policy and if you’are satisfied with the proposed fix, you can tick the box next to the resource name above the diff, and select Remediate.\nThe remediation modal shows there will be a pull request fix raised against your GitHub repository.\nAfter you select Remediate, you’ll be taken back to the Incidents screen with a message confirming the pull request has been successfully raised. You’ll also see the remediation has had the effect of hiding the issue from the Incidents list; other resources are listed, but the one we addressed is gone.\nYou’ll also notice, however, that the issue is still present from our CodePipeline source, so we’re not secure yet!\nOver in our CfnGoat repository in GitHub, we’ll see a new PR under the Pull requests tab, which is ready for review:\nDigging into the changed files, you’ll see the updated code that will soon be merged.\nBringing it all together. Merging our pull request in GitHub triggers our CI/CD deployment in AWS CodePipeline that we previously set up.\nYou may be able to tell where this is going!\nNotice our merged pull request commit has triggered the build:\nOf course, the scan will still fail as there are several other security issues affecting the CfnGoat repository, but if we head back to Bridgecrew, the issue we just fixed is gone:\nNow we know that the issue is not only fixed at source, but also that the fix has also made it through the CI/CD pipeline into production!\nCongratulations! You’ve built an automated IaC scanning workflow in a live environment and automated the fixing of an exposed S3 bucket!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/30_module_three/3004_bridgecrew_automate_add_runtime.html","title":"AWS runtime scanning","tags":[],"description":"","content":" Scanning runtime resources for vulnerable infrastructure Last but definitely not least, let’s switch gears to address infrastructure that wasn\u0026rsquo;t deployed by CloudFormation.\nGreenfield infrastructure as code deployments are a luxury not many of us have. In reality, our AWS accounts have objects that were created manually for one reason or another. Transitioning to IaC is rarely a one-and-done affair, so you may have objects in your AWS accounts that are managed by a team that has not yet made the switch.\nThat’s why it’s important to scan objects directly in your AWS environment in addition to scanning your CloudFormation or Terraform manifests in git or as part of the CI/CD pipeline, as we’ve already shown.\nBridgecrew provides runtime scanning via an AWS integration, allowing full coverage of infrastructure security both before and after deployment.\nAWS Runtime Integration To enable runtime scanning of your AWS account, goto the Integrations Tab and select AWS Read Only under the Cloud Providers section.\nRead-only access is scoped as minimally as possible in order to give Bridgecrew only the necessary access to scan your AWS accounts.  Click Add Account then Launch Stack to enable the integration:\nYou will be taken to your AWS account to authorize the integration:\nCheck the checkbox to approve the IAM permission creations via our CloudFormation stack, and click Create Stack\nYou can track the progress of the stack creation within your AWS account, once completed, you\u0026rsquo;ll see the integration turn green in the Bridgecrew dashboard!\nSucessful Integration: That’s all it takes to connect your AWS account to Bridgecrew for continuous cloud security monitoring and compliance benchmarking.\nExploring runtime violations With the runtime AWS account connected, let’s edit our filters on the Incidents page to show only the AWS source. In the filters option pane, select your AWS account ID that should now show up alongside your CodePipeline and GitHub repositories from the earlier modules.\nUnlike the rest of this workshop, the information displayed in your Bridgecrew Dashboard may differ from the images below, as no two AWS accounts will have the same content.  After setting our filter, we can browse through all the security and compliance violations detected in our live AWS account,\nIn the example below, we can see an S3 bucket is not encrypted at rest. Selecting a resource from the group of resources on the right hand side will display much more information, including a Terraform representation of the AWS object in question:\nFurther context on the issue and remediation options is also available in the Guidelines tab.\nBridgecrew also alerts on account-wide settings such as user password policies and informational best practices, such as tagging each resource with ownership or purpose information:\nUntagged Items in Account Weak Account Password Policy Identity and Access Management (IAM) Insights Bridgecrew also analyzes AWS IAM roles, permissions, groups, and policies to identify unused and overly-permissive configurations.\nYou can use the filter pane to only show Insights, highlighting IAM specific issues:\nIAM Insights will even provide a re-written, rightsized IAM policy document with only the permissions your applications are requesting of the role or policy. This helps you build and maintain least-privilege IAM and reduces the scope of abuse from a misconfigured or exploited application.\n"},{"uri":"/aws-modernization-workshop-bridgecrew/30_module_three/3005_bridgecrew_automate_fix_runtime.html","title":"AWS fixes in runtime","tags":[],"description":"","content":" Automating fixes in runtime Similar to what we did with pull request fixes in the previous module, Bridgecrew allows for immediate remediation of issues in runtime by reconfiguring your objects via the AWS APIs.\nImplementing automated remediations does require extra permissions than previously granted with the default AWS Read Only integration. When you attempt a runtime remediation without the correct permissions, you’ll be prompted to configure the AWS Remediation Stack:\nAdding the AWS Remediation stack follows the same workflow as the previous read-only AWS integration:\nSelect Create Stack and return to Bridgecrew, you will now be able to remediate runtime resources: Fixing an unencrypted S3 bucket Continuing with the example of the unencrypted S3 bucket from the previous page, the REMEDIATE button will now allow runtime changes to the S3 configuration:\nFor the sake of this workshop, we can use the AWS Console to confirm the selected bucket is currently unencrypted:\nBack in Bridgecrew, review the remediation, and select REMEDIATE a final time.\nBridgecrew will now use AWS API\u0026rsquo;s to ensure encryption is turned on for the selected resource:\nChecking the resource once more in the AWS Console, you will see that encryption is now enabled:\nThe violation will also have been marked resolved in the Bridgecrew Incidents page.\nConclusion Congratulations! You\u0026rsquo;ve integrated runtime security alerting and remediation into your DevSecOps automation!\nIn this workshop, you didn’t just learn how to automate security scanning—you learned how to bridge the gap between infrastructure development, DevOps, and cloud security. With these tools and processes at your disposal, you’re equipped to reduce risk by preventing cloud security errors as part of your development lifecycle. We also hope you’ve learned how important and easy it is to make security accessible to your engineering teams.\nFeel free to explore more of the Bridgecrew Dashboard, and try inviting more of your team to view and collaborate on the same security dashboard from the User Management page\nTo continue the conversation, you can find us @bridgecrewio on twitter, or say hi! in our #CodifiedSecurity slack channel here!\n"},{"uri":"/aws-modernization-workshop-bridgecrew/categories.html","title":"Categories","tags":[],"description":"","content":""},{"uri":"/aws-modernization-workshop-bridgecrew/tags.html","title":"Tags","tags":[],"description":"","content":""}]