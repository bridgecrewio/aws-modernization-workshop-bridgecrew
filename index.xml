<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud DevSecOps with Bridgecrew on Cloud DevSecOps workshop with Bridgecrew</title><link>/</link><description>Recent content in Cloud DevSecOps with Bridgecrew on Cloud DevSecOps workshop with Bridgecrew</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a workspace</title><link>/6_prerequisites/7_aws_setup/8_aws_eventengine/workspace.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/6_prerequisites/7_aws_setup/8_aws_eventengine/workspace.html</guid><description>The Cloud9 workspace should be built by an IAM user with Administrator privileges, not the root account user. Please ensure you are logged in as an IAM user, not the root account user.
This workshop was designed to run in the Oregon (us-west-2) region. Please don&amp;rsquo;t run in any other region. Future versions of this workshop will expand region availability, and this message will be removed.
Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted.</description></item><item><title>Create a workspace</title><link>/6_prerequisites/7_aws_setup/9_own_account/workspace.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/6_prerequisites/7_aws_setup/9_own_account/workspace.html</guid><description>The Cloud9 workspace should be built by an IAM user with Administrator privileges, not the root account user. Please ensure you are logged in as an IAM user, not the root account user.
This workshop was designed to run in the Oregon (us-west-2) region. Please don&amp;rsquo;t run in any other region. Future versions of this workshop will expand region availability, and this message will be removed.
Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted.</description></item><item><title>Bridgecrew Setup</title><link>/6_prerequisites/601_setting_up_bridgecrew_account.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/6_prerequisites/601_setting_up_bridgecrew_account.html</guid><description>You’ll need to sign up for a free Bridgecrew account to follow along with this tutorial. You can sign up for a free account here.
Bridgecrew CLI In this tutorial, we’re also going to use Bridgecrew CLI. The CLI works on Windows, Mac, and Linux. You can install it with pip:
pip3 install bridgecrew If installing globally on your system (not in a python venv or pipenv) you may need to have permissions to write the libraries to the necessary locations, ie:</description></item><item><title>Quick Setup</title><link>/6_prerequisites/7_aws_setup/8_aws_eventengine/setup_short.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/6_prerequisites/7_aws_setup/8_aws_eventengine/setup_short.html</guid><description> We are going to install jq and initilize a python enviroment. Cloud9 already has the latest version of Python installed.
Install jq - jq is a command-line tool for parsing JSON.
sudo yum install jq Start a python enviroment
python3 -m venv env source ./env/bin/activate</description></item><item><title>CfnGoat</title><link>/10_module_one/1001_cfngoat.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_module_one/1001_cfngoat.html</guid><description>Vulnerable-by-design demo repository setup This workshop uses our vulnerable-by-design CloudFormation project, CfnGoat, so that you can scan and automate infrastructure code without the added friction of integrating your own code. Simply clone the open-source project’s repository:
git clone https://github.com/bridgecrewio/cfngoat.git cd cfngoat git status Sample output:
$ git clone https://github.com/bridgecrewio/cfngoat.git cd cfngoat git status Cloning into &amp;#39;cfngoat&amp;#39;... remote: Enumerating objects: 64, done. remote: Counting objects: 100% (64/64), done. remote: Compressing objects: 100% (54/54), done.</description></item><item><title>Bridgecrew CLI</title><link>/10_module_one/1002_local_scan_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_module_one/1002_local_scan_cli.html</guid><description>Run Bridgecrew CLI locally To demonstrate what kinds of security and compliance errors Bridgecrew can identify in CloudFormation templates, we’ll start by using Bridgecrew CLI and send the results to the Bridgecrew platform.
Make sure you are in the cfngoat directory from the previous step, copy your unique Bridgecrew API token, and scan the cfngoat.yaml file:
bridgecrew -f cfngoat.yaml --bc-api-key $YOUR_BC_API_KEY --repo bridgecrewio/cfngoat You can also scan entire directories with -d &amp;lt;path&amp;gt;:</description></item><item><title>Bridgecrew Dashboard</title><link>/10_module_one/1003_local_scan_dashboard.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_module_one/1003_local_scan_dashboard.html</guid><description>Viewing results in Bridgecrew In the previous section, we scanned our demo CloudFormation repository locally and sent the results to the Bridgecrew platform for investigation and remediation.
To explore the reported issues we saw in the CLI output, head to the Incidents tab in your Bridgecrew account.
Bridgecrew comes with hundreds of out-of-the-box policies to help you adhere to cloud security best practices as defined by the Center of Internet Security (CIS).</description></item><item><title>CloudFormation repository setup</title><link>/20_module_two/2001_automating_iac_github.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2001_automating_iac_github.html</guid><description>Creating your own CfnGoat repository on GitHub To set up our continuous workflow and demonstrate the value of getting automated infrastructure security scanning, we need a hosted source repository. You can either push your local demo repository to GitHub or, since CfnGoat is already hosted on GitHub, we recommend you fork the repository to your own GitHub account.
Head to your GitHub account, visit the CfnGoat repository at https://github.com/bridgecrewio/cfngoat, and select Fork in the top right-hand corner:</description></item><item><title>AWS CodeBuild setup</title><link>/20_module_two/2002_automating_iac_codebuild.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2002_automating_iac_codebuild.html</guid><description>Setting up AWS CodeBuild for our CloudFormation repository. AWS CodeBuild paired with AWS CodePipeline is a CI/CD platform that can build projects, run jobs, and deploy infrastructure. We’re going to use it to scan the CloudFormation templates before deployment, allowing us to fail the build job and halt a deployment if there are any security violations in our CloudFormation code.
We’ll also automatically send the results to Brigecrew to maintain a view across all of our infrastructure projects and share visibility throughout our organization.</description></item><item><title>Edit IAM for CodeBuild</title><link>/20_module_two/2003_automating_iac_codebuild_iam.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2003_automating_iac_codebuild_iam.html</guid><description>Edit AWS IAM permissions to enable CodeBuild To give CodeBuild access to our Bridgecrew API secret we stored in AWS System Manager, we’ll need to add more permissions to the default IAM role created for new CodeBuild environments.
In the AWS IAM Dashboard, find the role called codebuild-bridgecrew-tutorial-service-role
Select the role, then click select Add Inline Policy from the right hand side.
This will bring up the &amp;ldquo;create policy visual editor&amp;rdquo;, for Service, select Systems Manager in the search box, then chose the GetParameters and GetParameter Actions.</description></item><item><title>AWS CodePipeline Setup</title><link>/20_module_two/2004_automating_iac_codepipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2004_automating_iac_codepipeline.html</guid><description>Setting up AWS CodePipeline to automatically trigger scans To trigger CodeBuild to run the scan automatically on each new commit in your CfnGoat GitHub repository, we’ll need to configure AWS CodePipeline. You can skip this step, but if you do, you’ll only be able to run manual scans from the CodeBuild UI, AWS CLI, or APIs, which doesn’t provide the DevSecOps automation we’re looking for!
To set it up, go to AWS CodePipeline and select Create Pipeline:</description></item><item><title>Pipeline Results</title><link>/20_module_two/2005_automating_iac_results.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2005_automating_iac_results.html</guid><description>Reviewing our pipeline results Your new CodePipeline will immediatley start running your CodeBuild job against the latest commit in your GFNGoat Repository.
You will be taken to the Pipeline Jobs page where you will see the progress as CodeBuild checks out the latest commit from GitHub and starts our job to run Bridgecrew against the CloudFormation configuration.
Below we see the Pipeline sucessfully created and starting to run:
If everything goes as intended, the pipeline should fail at the build stage since the CfnGoat code is purposely designed with security flaws.</description></item><item><title>GitHub Actions</title><link>/20_module_two/2006_automating_iac_github_actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2006_automating_iac_github_actions.html</guid><description>Setting up GitHub Actions for our CloudFormation repository. If your existing CI/CD Pipeline runs in GitHub Actions, this can also be configured to scan the CloudFormation templates before deployment, allowing us to fail the build job and halt a deployment if there are any security violations in our CloudFormation code.
As with AWS CodeBuild, we’ll also automatically send the results to Brigecrew to maintain a view across all of our infrastructure projects and share visibility throughout our organization.</description></item><item><title>Bridgecrew platform results</title><link>/30_module_three/3001_bridgecrew_dashboard_results.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/30_module_three/3001_bridgecrew_dashboard_results.html</guid><description>Investigating security violations in Bridgecrew While the output from your CodeBuild run is very useful for quickly getting a sense of why your build failed, you may also want to visualize issues over time with a given repository or group objects affected by the same issue for clearer understanding.
If your developers don’t have direct access to the AWS account, the provided logs may be constrained.
For all those reasons and more, Bridgecrew provides reporting, monitoring, alerting, and visualizations for individual runs and across your entire infrastructure.</description></item><item><title>GitHub integration</title><link>/30_module_three/3002_bridgecrew_automate_integrate_github.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/30_module_three/3002_bridgecrew_automate_integrate_github.html</guid><description>Integrating Bridgecrew with GitHub By adding another Bridgecrew integration, you can generate and push automated pull requests (PRs) back into your GitHub repository to update your CloudFormation code and fix security issues, as well as gain automated scanning of incoming community pull requests.
Head back to the Bridgecrew Integrations tab and select GitHub under the Source Control section.
Just like we did for the AWS CodePipeline GitHub authorization, choose which accounts and repositories to grant the Bridgecrew github integration access too.</description></item><item><title>Pull request fixes</title><link>/30_module_three/3003_bridgecrew_automate_pr_remediation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/30_module_three/3003_bridgecrew_automate_pr_remediation.html</guid><description>Automating fixes through pull requests Now that you’ve pulled in multiple infrastructure sources, you might be getting overwhelmed at the prospect of fixing the several dozen issues Bridgecrew has identified. To help you implement fixes as fast as possible, Bridgecrew generates and pushes fix pull requests back into your GitHub repository.
Let’s walk through the process with one of the policies we looked at earlier, Ensure S3 bucket has ‘restrict_public_bucket’ enabled:</description></item><item><title>AWS runtime scanning</title><link>/30_module_three/3004_bridgecrew_automate_add_runtime.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/30_module_three/3004_bridgecrew_automate_add_runtime.html</guid><description>Scanning runtime resources for vulnerable infrastructure Last but definitely not least, let’s switch gears to address infrastructure that wasn&amp;rsquo;t deployed by CloudFormation.
Greenfield infrastructure as code deployments are a luxury not many of us have. In reality, our AWS accounts have objects that were created manually for one reason or another. Transitioning to IaC is rarely a one-and-done affair, so you may have objects in your AWS accounts that are managed by a team that has not yet made the switch.</description></item><item><title>AWS fixes in runtime</title><link>/30_module_three/3005_bridgecrew_automate_fix_runtime.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/30_module_three/3005_bridgecrew_automate_fix_runtime.html</guid><description>Automating fixes in runtime Similar to what we did with pull request fixes in the previous module, Bridgecrew allows for immediate remediation of issues in runtime by reconfiguring your objects via the AWS APIs.
Implementing automated remediations does require extra permissions than previously granted with the default AWS Read Only integration. When you attempt a runtime remediation without the correct permissions, you’ll be prompted to configure the AWS Remediation Stack:</description></item></channel></rss>