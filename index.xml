<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud DevSecOps with Bridgecrew</title><link>/aws-modernization-workshop-bridgecrew/</link><description>Recent content on Cloud DevSecOps with Bridgecrew</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/aws-modernization-workshop-bridgecrew/index.xml" rel="self" type="application/rss+xml"/><item><title>CloudFormation Overview?</title><link>/aws-modernization-workshop-bridgecrew/5_getting_started/502_what_is_cloudformation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/5_getting_started/502_what_is_cloudformation.html</guid><description>How do CloudFormation and infrastructure as code work? Infrastructure as code (IaC) frameworks such as AWS CloudFormation, Terraform, and Pulumi make cloud provisioning simple and scalable by leveraging automation and code. Defining your cloud infrastructure in code simplifies repetitive DevOps tasks and gives you a single source of truth for your app and environment configuration.
AWS CloudFormation enables you to define your AWS infrastructure with templates, which you can check into version control or store in S3 buckets.</description></item><item><title>Bridgecrew setup</title><link>/aws-modernization-workshop-bridgecrew/6_prerequisites/601_setting_up_bridgecrew_account.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/6_prerequisites/601_setting_up_bridgecrew_account.html</guid><description>Bridgecrew setup You’ll need to sign up for a free Bridgecrew account to follow along with this tutorial. You can sign up for a free account here.
Bridgecrew CLI In this tutorial, we’re also going to use Bridgecrew CLI. The CLI works on Windows, Mac, and Linux. You can install it with pip:
pip3 install bridgecrew If you run into problems, try the alternate install instructions.
Bridgecrew API token Throughout the tutorial, you’ll need to use the Bridgecrew API token.</description></item><item><title>Bridgecrew CLI</title><link>/aws-modernization-workshop-bridgecrew/10_module_one/1002_local_scan_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/10_module_one/1002_local_scan_cli.html</guid><description>Run Bridgecrew CLI locally To demonstrate what kinds of security and compliance errors Bridgecrew can identify in CloudFormation templates, we’ll start by using Bridgecrew CLI and send the results to the Bridgecrew platform.
Make sure you are in the cfngoat directory from the previous step, copy your unique Bridgecrew API token, and scan the cfngoat.yaml file:
bridgecrew -f templates/cfngoat.yaml --bc-api-key YOUR_API_KEY_HERE You can also scan entire directories with -d &amp;lt;path&amp;gt;:</description></item><item><title>Bridgecrew Dashboard</title><link>/aws-modernization-workshop-bridgecrew/10_module_one/1003_local_scan_dashboard.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/10_module_one/1003_local_scan_dashboard.html</guid><description>Viewing results in Bridgecrew In the previous section, we scanned our demo CloudFormation repository locally and sent the results to the Bridgecrew platform for investigation and remediation.
To explore the reported issues we saw in the CLI output, head to the Incidents tab in your Bridgecrew account.
Bridgecrew comes with hundreds of out-of-the-box policies to help you adhere to cloud security best practices as defined by the Center of Internet Security (CIS).</description></item><item><title>CloudFormation repository setup</title><link>/aws-modernization-workshop-bridgecrew/20_module_two/2001_automating_iac_github.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/20_module_two/2001_automating_iac_github.html</guid><description>Creating your own CfnGoat repository on GitHub To set up our continuous workflow and demonstrate the value of getting automated infrastructure security scanning, we need a hosted source repository. You can either push your local demo repository to GitHub or, since CfnGoat is already hosted on GitHub, we recommend you fork the repository to your own GitHub account.
Head to your GitHub account, visit the CfnGoat repository at https://github.com/bridgecrewio/cfngoat, and select Fork in the top right-hand corner:</description></item><item><title>AWS CodeBuild setup</title><link>/aws-modernization-workshop-bridgecrew/20_module_two/2002_automating_iac_codebuild.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/20_module_two/2002_automating_iac_codebuild.html</guid><description>Setting up AWS CodeBuild for our CloudFormation repository. AWS CodeBuild paired with AWS CodePipeline is a CI/CD platform that can build projects, run jobs, and deploy infrastructure. We’re going to use it to scan the CloudFormation templates before deployment, allowing us to fail the build job and halt a deployment if there are any security violations in our CloudFormation code.
We’ll also automatically send the results to Brigecrew to maintain a view across all of our infrastructure projects and share visibility throughout our organization.</description></item><item><title>Edit IAM for CodeBuild</title><link>/aws-modernization-workshop-bridgecrew/20_module_two/2003_automating_iac_codebuild_iam.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/20_module_two/2003_automating_iac_codebuild_iam.html</guid><description>Edit AWS IAM permissions to enable CodeBuild To give CodeBuild access to our Bridgecrew API secret we stored in AWS System Manager, we’ll need to add more permissions to the default IAM role created for new CodeBuild environments.
In the AWS IAM Dashboard, find the role called codebuild-bridgecrew-tutorial-service-role
Select the role, then click select Add Inline Policy from the right hand side.
This will bring up the &amp;ldquo;create policy visual editor&amp;rdquo;, for Service, select Systems Manager in the search box, then chose the GetParameters and GetParameter Actions.</description></item><item><title>AWS CodePipeline Setup</title><link>/aws-modernization-workshop-bridgecrew/20_module_two/2004_automating_iac_codepipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/20_module_two/2004_automating_iac_codepipeline.html</guid><description>Setting up AWS CodePipeline to automatically trigger scans To trigger CodeBuild to run the scan automatically on each new commit in your CfnGoat GitHub repository, we’ll need to configure AWS CodePipeline. You can skip this step, but if you do, you’ll only be able to run manual scans from the CodeBuild UI, AWS CLI, or APIs, which doesn’t provide the DevSecOps automation we’re looking for!
To set it up, go to AWS CodePipeline and select Create Pipeline:</description></item><item><title>Pipeline Results</title><link>/aws-modernization-workshop-bridgecrew/20_module_two/2005_automating_iac_results.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/20_module_two/2005_automating_iac_results.html</guid><description>Reviewing our pipeline results Your new CodePipeline will immediatley start running your CodeBuild job against the latest commit in your GFNGoat Repository.
You will be taken to the Pipeline Jobs page where you will see the progress as CodeBuild checks out the latest commit from GitHub and starts our job to run Bridgecrew against the CloudFormation configuration.
Below we see the Pipeline sucessfully created and starting to run:
If everything goes as intended, the pipeline should fail at the build stage since the CfnGoat code is purposely designed with security flaws.</description></item><item><title>Automate Fixes through Pull Requests</title><link>/aws-modernization-workshop-bridgecrew/30_module_three/3002_bridgecrew_automate_pr_remediation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/30_module_three/3002_bridgecrew_automate_pr_remediation.html</guid><description>Automate Fixes Through Pull Requests By adding another Intgration into Bridgecrew, we can generate automated Pull Requests (PR&amp;rsquo;s) into your Github repository, to update your CloudFormation manifests and fix security issues!
To do this, we&amp;rsquo;ll use the &amp;ldquo;Github&amp;rdquo; Source Control integration within the Bridgecrew Dashboard, allowing Bridgecrew to raise pull requests (and also, scan incoming pull requests automatically for issues!)
Just like the previous AWS Github authorization, you can choose which repositories to give Bridgecrew permission to access.</description></item><item><title>Protect non CloudFormation Infrastructure</title><link>/aws-modernization-workshop-bridgecrew/30_module_three/3001_bridgecrew_automate_add_runtime.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/30_module_three/3001_bridgecrew_automate_add_runtime.html</guid><description>Runtime Scanning of Vulnerable Infrastructure Last but definitley by no means least, lets answer the remaining question:
What about infrastructure that wasnt deployed by CloudFormation? Greenfield Infrastructure as Code deployments are a luxury not many of us have, with many objects in our AWS accounts often historical, created manually, or managed by a team that has not yet made the DevOps move to automation.
Scanning objects directly in the AWS environment we call &amp;ldquo;Runtime Scanning&amp;rdquo;, compared to &amp;ldquo;Build time&amp;rdquo; scanning of CloudFormation or Terraform manifests in git or as part of the CI/CD pipeline as we&amp;rsquo;ve already seen.</description></item></channel></rss>