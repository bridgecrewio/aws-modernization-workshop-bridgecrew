<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud DevSecOps with Bridgecrew</title><link>/</link><description>Recent content on Cloud DevSecOps with Bridgecrew</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>What is CloudFormation?</title><link>/5_getting_started/500_what_is_cloudformation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/5_getting_started/500_what_is_cloudformation.html</guid><description>What is CloudFormation and Infrastructure as Code? AWS CloudFormation makes cloud provisioning simple and scalable by leveraging both automation and configuration as code. Defining your cloud infrastructure and applications as code simplifies repetitive DevOps tasks and gives you a single source of truth for app and environment configuration.
This makes it more important to make sure your infrastructure as code (IaC) resources follow security best practices—your CloudFormation configuration is now another part of your codebase, and should be tested and scanned for errors and risks just like any other code review.</description></item><item><title>Setup your Bridgecrew account</title><link>/5_getting_started/501_setting_up_bridgecrew_account.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/5_getting_started/501_setting_up_bridgecrew_account.html</guid><description>Setup your Bridgecrew account CloudFormation gives us total control to create, change, and delete resources in AWS. With CloudFormation, it&amp;rsquo;s easy to pick and deploy any of the hundreds of templates readily available from the AWS sample templates. Because these templates are built solely with functionality in mind, it&amp;rsquo;s also easy to forget important security configuration and end up having an insecure service running in production.
That’s why scanning your CloudFormation templates before deployment is so important.</description></item><item><title>Setup git</title><link>/5_getting_started/502_set_up_git.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/5_getting_started/502_set_up_git.html</guid><description>Check your local git installation To ensure your local git client is setup correctly, try the following commands, you should not receive an error from any of them, and end up with a copy of our &amp;lsquo;vulnerable by design&amp;rsquo; training project &amp;ldquo;CFNGoat&amp;rdquo; on your machine, which we&amp;rsquo;ll use later!
git clone https://github.com/bridgecrewio/cfngoat.git cd cfngoat git status Sample output:
$ git clone https://github.com/bridgecrewio/cfngoat.git cd cfngoat git status Cloning into &amp;#39;cfngoat&amp;#39;... remote: Enumerating objects: 64, done.</description></item><item><title>Your Bridgecrew API Key</title><link>/10_module_one/1001_bridgecrew_api_key.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_module_one/1001_bridgecrew_api_key.html</guid><description>Your Bridgecrew API Key To run the Bridgecrew CLI we installed with pip3 earlier, you’ll need an API token from your bridgecrew account.
To get it, go here! (https://www.bridgecrew.cloud/integrations/api-token) or, when logged into the bridgecrew console, go to Integrations &amp;gt; API Token and copy the token provided!</description></item><item><title>Bridgecrew CLI</title><link>/10_module_one/1002_local_scan_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_module_one/1002_local_scan_cli.html</guid><description>Scan a repo locally with the bridgecrew CLI We use the Bridgecrew API token to connect our local Bridgecrew CLI with the Bridgecrew cloud, the following command will scan the CFNGoat repository we cloned for infrastructure vulnerabilitues and display any issues and violations.
The API key also sends these results to the Bridgecrew cloud for so we can track, inspect in more detail and remediate them there, we&amp;rsquo;ll cover this a little later.</description></item><item><title>Bridgecrew Dashboard</title><link>/10_module_one/1003_local_scan_dashboard.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_module_one/1003_local_scan_dashboard.html</guid><description>Viewing our results in the Bridgecrew Dashboard If we access the Bridgecrew dashboard at https://bridgecrew.cloud we will see statistics for the configuration issues and policy violations found by the Bridgecrew CLI in our cfngoat repository, feel free to explore the dashboard, then click onto the &amp;ldquo;Incidents&amp;rdquo; tab on the left navigation bar to drill down and explore the reported issues we saw on the CLI output in more details.</description></item><item><title>Fork your own CFNGoat</title><link>/20_module_two/2001_automating_iac_github.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2001_automating_iac_github.html</guid><description>Create your own CFNGoat fork on Github Since CFNGoat is already hosted on github, lets create our own fork so we can make changes and integrate our automated pipeline.
Visit the CFNGoat repo at (https://github.com/bridgecrewio/cfngoat)
Login to github.com if you are not already authenticated, and click the Fork button for the CFNGoat repository.
If you have multiple organisations, github will ask which of your orgs to fork into, chose your personal account (your username in the list) to fork the repo.</description></item><item><title>Setup AWS Codebuild</title><link>/20_module_two/2002_automating_iac_codebuild.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2002_automating_iac_codebuild.html</guid><description>Setup AWS CodeBuild for our CFNGoat fork. AWS CodeBuild, paired with AWS CodePipeline is a CI/CD platform that can build projects, run jobs, and deploy infrastructure. We’re going to use it to scan the CloudFormation templates before deployment, allowing us to fail the build job and halt a deployment if there are any security violations in our CloudFormation code.
We&amp;rsquo;ll also send the results to the Brigecrew dashboard automatically, in order to maintain a view across all of our infrastructure projects and share visability throughout our organisation.</description></item><item><title>Edit IAM for Codebuild</title><link>/20_module_two/2003_automating_iac_codebuild_iam.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2003_automating_iac_codebuild_iam.html</guid><description>Edit AWS IAM permissions to enable CodeBuild CodeBuild creates an IAM role for running builds, however, we need CodeBuild to access our Bridgecrew API secret we stored in system manager, so we&amp;rsquo;ll need to add some more permissions to the IAM role.
In the AWS IAM Dashboard, find the role, it will be called codebuild-bridgecrew-tutorial-service-role unless you renamed the CodeBuild project we&amp;rsquo;ve just set up.
Select the role, then click select Add Inline Policy from the right hand side (it&amp;rsquo;s a text link, not a button, so not the easiest thing to spot!</description></item><item><title>Setup AWS CodePipeline</title><link>/20_module_two/2004_automating_iac_codepipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2004_automating_iac_codepipeline.html</guid><description>Setting up CodePipeline to automatically trigger scans If you want CodeBuild to run the scan automatically on each new commit in your CFNGoat Github repository, you’ll need to configure AWS CodePipeline. You can skip this step, but if you do, you’ll only be able to run manual scans from the CodeBuild UI, AWS CLI, or API&amp;rsquo;s, which doesn&amp;rsquo;t provide us the DevSecOps automation we&amp;rsquo;re looking for!
To set it up, go to AWS CodePipeline and select Create Pipeline:</description></item><item><title>Pipeline Results</title><link>/20_module_two/2005_automating_iac_results.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_module_two/2005_automating_iac_results.html</guid><description>Viewing our Pipeline results and Security Posture. Our new CodePipeline will immediatley start running our CodeBuild job against the latest commit in our GFNGoat Repository.
You will be taken to the Pipeline Jobs page, where you will see the progress as CodeBuild checks out the latest commit from Github, then starts our job to run Bridgecrew against the CloudFormation.
If everything goes well, the pipeline should fail at the build stage.</description></item></channel></rss>