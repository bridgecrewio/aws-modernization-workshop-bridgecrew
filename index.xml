<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud DevSecOps with Bridgecrew on Cloud DevSecOps workshop with Bridgecrew</title>
    <link>/</link>
    <description>Recent content in Cloud DevSecOps with Bridgecrew on Cloud DevSecOps workshop with Bridgecrew</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>At an AWS event</title>
      <link>/kubernetes/20_prerequisites/aws_setup/2001_event_engine_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/20_prerequisites/aws_setup/2001_event_engine_setup.html</guid>
      <description>Using AWS Event Engine To complete this workshop, you are provided with an AWS account via the AWS Event Engine service. A 12-digit hash will be provided to you by event staff; this is your unique access code. For example:
e8476example Create an AWS account Connect to the portal by clicking the button or browsing to https://dashboard.eventengine.run/. The following screen shows up. Enter the provided hash in the text box. The button on the bottom right corner changes to Accept Terms &amp;amp; Login.</description>
    </item>
    
    <item>
      <title>Own AWS environment</title>
      <link>/kubernetes/20_prerequisites/aws_setup/2002_own_aws_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/20_prerequisites/aws_setup/2002_own_aws_setup.html</guid>
      <description>Disclaimer: We will be using an AWS account to show Bridgecrew’s runtime capabilities and drift detection. If you follow along, remember to shut down any AWS services to avoid additional fees.
AWS environment setup Your account must have the ability to create new IAM roles and scope other IAM permissions.
If you don&amp;rsquo;t already have an AWS account with Administrator access: create one now by clicking here
Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop</description>
    </item>
    
    <item>
      <title>Terraform Environment</title>
      <link>/azure/20_prerequisites/2001_terraform_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/20_prerequisites/2001_terraform_setup.html</guid>
      <description>Terraform Environment Setup You’ll use the Terraform CLI locally as well as optionally Terraform Cloud. If you don’t have the Terraform CLI installed on your computer, see the instructions here.
Terraform Cloud (TFC) is a self-service SaaS platform that extends the capabilities of the open source Terraform CLI. It’s free for basic usage, but we’ll be leveraging advanced features, such as Sentinel, that will require a paid subscription or trial. Sign up for Terraform Cloud here and log in using your CLI.</description>
    </item>
    
    <item>
      <title>Account setup</title>
      <link>/kubernetes/20_prerequisites/2003_account_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/20_prerequisites/2003_account_setup.html</guid>
      <description>A free Bridgecrew account The Bridgecrew platform will give us visibility, solutions, and alerts from the first line of Kubernetes manifest all the way through to checking the running cluster’s security posture. Sign up or log in to an existing account at https://bridgecrew.cloud
Generate a Bridgecrew API key Throughout this tutorial, you’ll need to use the Bridgecrew API token. You can access it here or in your Bridgecrew account by navigating to the Integrations tab and selecting API Token.</description>
    </item>
    
    <item>
      <title>Create our scenario</title>
      <link>/kubernetes/20_prerequisites/2002_create_our_scenario.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/20_prerequisites/2002_create_our_scenario.html</guid>
      <description>The automated AWS workshop environment To pre-build this environment for each workshop attendee, we&amp;rsquo;ll run some CloudFormation within our AWS account.
An introduction to “kind” kind, or “Kubernetes in Docker” is a simple way to create local Kubernetes clusters for testing, experimentation and development.
As the name suggests, kind nests a Kubernetes cluster inside containers on your existing (Docker, Podman, ContainerD, etc) system.
We’ll be using kind to ensure everyone has the same, repeatable Kubernetes configuration for this workshop, regardless of deployment location.</description>
    </item>
    
    <item>
      <title>Terraform Environment</title>
      <link>/terraform/20_prerequisites/2001_terraform_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/20_prerequisites/2001_terraform_setup.html</guid>
      <description>Terraform Environment Setup You’ll use the Terraform CLI locally as well as optionally Terraform Cloud. If you don’t have the Terraform CLI installed on your computer, see the instructions here.
If you are using an Amazon-provided AWS account, you do not need to install terraform locally, as it will already be installed in the Cloud9 IDE environment which has been set up for you.
Terraform Cloud (TFC) is a self-service SaaS platform that extends the capabilities of the open source Terraform CLI.</description>
    </item>
    
    <item>
      <title>Optional local setup</title>
      <link>/kubernetes/20_prerequisites/2010_optional_local_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/20_prerequisites/2010_optional_local_setup.html</guid>
      <description>Go it alone (local setup) This option is strongly discouraged because we will be unable to provide the same level of support throughout the live workshops. Every local environment is different and we cannot guarantee that these instructions will work flawlessly in every environment.
However, we’d like to provide Option Three so that you can see the steps needed to install all the needed dependencies for the workshop.
These steps are intended for a Linux X64 Ubuntu 20.</description>
    </item>
    
    <item>
      <title>Own AWS environment</title>
      <link>/terraform/20_prerequisites/aws_setup/2002b_own_aws_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/20_prerequisites/aws_setup/2002b_own_aws_setup.html</guid>
      <description>Disclaimer: We will be using an AWS account to show Bridgecrew’s runtime capabilities and drift detection. If you follow along, remember to shut down any AWS services to avoid additional fees.
AWS Environment setup Your account must have the ability to create new IAM roles and scope other IAM permissions.
If you don&amp;rsquo;t already have an AWS account with Administrator access: create one now by clicking here
Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop</description>
    </item>
    
    <item>
      <title>Bridgecrew setup</title>
      <link>/azure/20_prerequisites/2003_bc_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/20_prerequisites/2003_bc_setup.html</guid>
      <description>You’ll need to sign up for a free Bridgecrew account to follow along with this tutorial. You can sign up for a free account here.
Checkov In this tutorial, we’re also going to use Checkov. Checkov works on Windows, Mac, and Linux. You can install it with pip:
pip3 install checkov If installing globally on your system (not in a python venv or pipenv) you may need to have permissions to write the libraries to the necessary locations, ie:</description>
    </item>
    
    <item>
      <title>Bridgecrew setup</title>
      <link>/terraform/20_prerequisites/2003_bc_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/20_prerequisites/2003_bc_setup.html</guid>
      <description>You’ll need to sign up for a free Bridgecrew account to follow along with this tutorial. You can sign up for a free account here.
Checkov In this tutorial, we’re also going to use Checkov. Checkov works on Windows, Mac, and Linux. You can install it with pip:
pip3 install checkov If installing globally on your system (not in a python venv or pipenv) you may need to have permissions to write the libraries to the necessary locations, ie:</description>
    </item>
    
    <item>
      <title>ArgoCD</title>
      <link>/kubernetes/30_scenario_walkthrough/3001_argo_cd.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/30_scenario_walkthrough/3001_argo_cd.html</guid>
      <description>In order to access the ArgoCD web interface within our Kubernetes cluster, we&amp;rsquo;ll need to know the public IP address of our workshop environment.
Clicking the link below, will load the CloudFormation stacks page. Select bridgecrew-workshop and select the Outputs tab, where we will see the public IP and ArgoCD URL.
https://us-east-2.console.aws.amazon.com/cloudformation/home?region=us-east-2#/stacks?filteringStatus=active&amp;amp;filteringText=&amp;amp;viewNested=true&amp;amp;hideStacks=false
The URL will be in the form https://&amp;lt;CLUSTER IP&amp;gt;:32443 click this link and you will be prompted with the ArgoCD login screen.</description>
    </item>
    
    <item>
      <title>Create a workspace</title>
      <link>/cloudformation/6_prerequisites/7_aws_setup/8_aws_eventengine/workspace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/6_prerequisites/7_aws_setup/8_aws_eventengine/workspace.html</guid>
      <description>The Cloud9 workspace should be built by an IAM user with Administrator privileges, not the root account user. Please ensure you are logged in as an IAM user, not the root account user.
This workshop was designed to run in the Oregon (us-west-2) region. Please don&amp;rsquo;t run in any other region. Future versions of this workshop will expand region availability, and this message will be removed.
Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted.</description>
    </item>
    
    <item>
      <title>Create a workspace</title>
      <link>/terraform/20_prerequisites/aws_setup/aws_event/workspace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/20_prerequisites/aws_setup/aws_event/workspace.html</guid>
      <description>The Cloud9 workspace should be built by an IAM user with Administrator privileges, not the root account user. Please ensure you are logged in as an IAM user, not the root account user.
This workshop was designed to run in the Oregon (us-west-2) region. Please don&amp;rsquo;t run in any other region. Future versions of this workshop will expand region availability, and this message will be removed.
Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted.</description>
    </item>
    
    <item>
      <title>Bridgecrew Code Reviews</title>
      <link>/kubernetes/30_scenario_walkthrough/3002_bridgecrew_code_review.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/30_scenario_walkthrough/3002_bridgecrew_code_review.html</guid>
      <description>Each time ArgoCD tries to deploy our development environment to the Kubernetes cluster, the cluster is instructed to check the security posture of incoming Kubernetes manifests with the Bridgecrew admission controller.
Details of all the issues found with the development deployment can be seen in this view, with filters for severity, tags, and other important attributes.
We’ve detected 17 issues on our Deployment object and no issues on the service object.</description>
    </item>
    
    <item>
      <title>Automation deep dive</title>
      <link>/kubernetes/30_scenario_walkthrough/3003_automation_deepdive.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/30_scenario_walkthrough/3003_automation_deepdive.html</guid>
      <description>While doing things manually is NOT what we want for a DevSecOps pipeline, for the sake of understanding the current setup a little more, lets see what it looks like if the developer was to try and apply the dev environment directly to the kubernetes cluster using the CLI, kubectl.
This will render the kustomize template and pass it to the kubernetes API, we should see the same results from the API as we saw through Argo, with our admission controller rejecting the deployment…</description>
    </item>
    
    <item>
      <title>Create a workspace</title>
      <link>/cloudformation/6_prerequisites/7_aws_setup/9_own_account/workspace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/6_prerequisites/7_aws_setup/9_own_account/workspace.html</guid>
      <description>The Cloud9 workspace should be built by an IAM user with Administrator privileges, not the root account user. Please ensure you are logged in as an IAM user, not the root account user.
This workshop was designed to run in the Oregon (us-west-2) region. Please don&amp;rsquo;t run in any other region. Future versions of this workshop will expand region availability, and this message will be removed.
Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted.</description>
    </item>
    
    <item>
      <title>Bridgecrew Setup</title>
      <link>/cloudformation/6_prerequisites/601_setting_up_bridgecrew_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/6_prerequisites/601_setting_up_bridgecrew_account.html</guid>
      <description>You’ll need to sign up for a free Bridgecrew account to follow along with this tutorial. You can sign up for a free account here.
Checkov CLI In this tutorial, we’re also going to use Checkov CLI. The CLI works on Windows, Mac, and Linux. You can install it with pip:
pip3 install checkov If installing globally on your system (not in a python venv or pipenv) you may need to have permissions to write the libraries to the necessary locations, ie:</description>
    </item>
    
    <item>
      <title>Scenario summary</title>
      <link>/kubernetes/30_scenario_walkthrough/3004_scenario_summary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/30_scenario_walkthrough/3004_scenario_summary.html</guid>
      <description>Where are we now? To summarize, we now have a free admission controller installed into our Kubernetes cluster to prevent issues from being deployed. Let’s take a look at where all this is happening in the development cycle:
So far, we’ve blocked the automated deployment (n the red oval). However, before we could block deployment, our team already spent a lot of time developing and testing the code we blocked. It would be great to spot issues earlier in the pipeline, so that we avoid the rework and duplicated efforts caused by the issues and blocked deployment.</description>
    </item>
    
    <item>
      <title>Integrate Bridgecrew with GitHub</title>
      <link>/kubernetes/40_pull_requests_and_ci/4001_integrate_bridgecrew_github.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/40_pull_requests_and_ci/4001_integrate_bridgecrew_github.html</guid>
      <description>Integrate Bridgecrew with GitHub To enable automated PR scanning on your repositories, goto the **Integrations **page at the bottom of the icon bar on the left.
Then, select New Integration and select GitHub from the Code Repositories options
A pop-up dialog box will allow you to Authorize with your GitHub account and choose the repositories you want Bridgecrew to scan. Select **Authorize **to be redirected to GitHub to complete this step.</description>
    </item>
    
    <item>
      <title>Create A pull request</title>
      <link>/kubernetes/40_pull_requests_and_ci/4002_create_test_pr.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/40_pull_requests_and_ci/4002_create_test_pr.html</guid>
      <description>Create infrastructure with a pull request To see our new security controls in action, let&amp;rsquo;s create a pull request to modify our development environment configuration!
In GitHub, on your fork of KustomizeGoat, navigate into the kustomize &amp;gt; overlays and dev directories:
Select on the kustomization.yaml file to open it in the GitHub web viewer, and select edit.
Let&amp;rsquo;s make a simple change right now to trigger a build. Modify the name of the dev namespace.</description>
    </item>
    
    <item>
      <title>Block with CI</title>
      <link>/kubernetes/40_pull_requests_and_ci/4003_blocking_with_ci.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/40_pull_requests_and_ci/4003_blocking_with_ci.html</guid>
      <description>PR scanning versus CI Our pull request annotations give good collaborative team feedback to the development teams involved, however, without extra configuration, the feedback is ecactly that, just feedback.
CI pipelines allow us to actually block (by failing) a build or change from making it from a development branch, into a main or production branch, while these two types of scans overlap, it is worth showing how you can configure Bridgecrew to sit within any CI pipeline to perform this function.</description>
    </item>
    
    <item>
      <title>Quick Setup</title>
      <link>/cloudformation/6_prerequisites/7_aws_setup/8_aws_eventengine/setup_short.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/6_prerequisites/7_aws_setup/8_aws_eventengine/setup_short.html</guid>
      <description> We are going to install jq and initilize a python enviroment. Cloud9 already has the latest version of Python installed.
Install jq - jq is a command-line tool for parsing JSON.
sudo yum install jq Start a python enviroment
python3 -m venv env source ./env/bin/activate </description>
    </item>
    
    <item>
      <title>Quick Setup</title>
      <link>/terraform/20_prerequisites/aws_setup/aws_event/setup_short.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/20_prerequisites/aws_setup/aws_event/setup_short.html</guid>
      <description> We are going to install jq and initilize a python enviroment. Cloud9 already has the latest version of Python installed.
Install jq - jq is a command-line tool for parsing JSON.
sudo yum install jq Start a python enviroment
python3 -m venv env source ./env/bin/activate </description>
    </item>
    
    <item>
      <title>AWS runtime</title>
      <link>/kubernetes/60_securing_runtime/6001_aws_runtime_scanning.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/60_securing_runtime/6001_aws_runtime_scanning.html</guid>
      <description>AWS runtime Greenfield infrastructure as code (IaC) deployments are unfortunately not very common. In reality, AWS accounts typically have objects that were created manually. Transitioning to IaC is rarely a one-and-done affair, so you may have objects in your AWS accounts that are managed by a team that has not yet made the switch to IaC.
That’s why it’s especially important to scan objects directly in your AWS environment and your Terraform templates in Git or as part of the CI/CD pipeline, as shown earlier.</description>
    </item>
    
    <item>
      <title>Kubernetes runtime</title>
      <link>/kubernetes/60_securing_runtime/6002_k8s_runtime_scanning.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kubernetes/60_securing_runtime/6002_k8s_runtime_scanning.html</guid>
      <description>Kubernetes runtime Now let’s add insights into our Kubernetes workloads that are already running.
In the integrations page, click ADD INTEGRATION
Then, from the Cloud Providers section, choose Kubernetes:
Create a new API key for the integration and click CREATE:
Give the cluster a name. This name is used to identify the Kubernetes cluster within Bridgecrew. For example, use workshop-cluster.
Next, select your Kubernetes version (&amp;gt;0.19 or &amp;lt;0.19) and copy the provided kubectl commands:</description>
    </item>
    
    <item>
      <title>CfnGoat</title>
      <link>/cloudformation/10_module_one/1001_cfngoat.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/10_module_one/1001_cfngoat.html</guid>
      <description>Vulnerable-by-design demo repository setup This workshop uses our vulnerable-by-design CloudFormation project, CfnGoat, so that you can scan and automate infrastructure code without the added friction of integrating your own code. Simply clone the open-source project’s repository:
git clone https://github.com/bridgecrewio/cfngoat.git cd cfngoat git status Sample output:
$ git clone https://github.com/bridgecrewio/cfngoat.git cd cfngoat git status Cloning into &amp;#39;cfngoat&amp;#39;... remote: Enumerating objects: 64, done. remote: Counting objects: 100% (64/64), done. remote: Compressing objects: 100% (54/54), done.</description>
    </item>
    
    <item>
      <title>TerraGoat</title>
      <link>/azure/30_module_one/1001_terragoat.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/30_module_one/1001_terragoat.html</guid>
      <description>Vulnerable-by-design demo repository setup This workshop uses our vulnerable-by-design Terraform project, TerraGoat, so that you can scan and automate infrastructure code without the added friction of integrating your own code.
Fork the TerraGoat repository on GitHub To set up your demo environment, we&amp;rsquo;re going to fork the TerraGoat repository.
Head over to the TerraGoat repository and fork it using the button in the upper right corner.
If you have multiple organizations, GitHub will ask which of your orgs to fork into.</description>
    </item>
    
    <item>
      <title>TerraGoat</title>
      <link>/terraform/30_module_one/1001_terragoat.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/30_module_one/1001_terragoat.html</guid>
      <description>Vulnerable-by-design demo repository setup This workshop uses our vulnerable-by-design Terraform project, TerraGoat, so that you can scan and automate infrastructure code without the added friction of integrating your own code.
Fork the TerraGoat repository on GitHub To set up your demo environment, we&amp;rsquo;re going to fork the TerraGoat repository.
Head over to the TerraGoat repository and fork it using the button in the upper right corner.
If you have multiple organizations, GitHub will ask which of your orgs to fork into.</description>
    </item>
    
    <item>
      <title>Checkov</title>
      <link>/azure/30_module_one/1002_local_scan_cli.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/30_module_one/1002_local_scan_cli.html</guid>
      <description>If you are running Checkov with the Bridgecrew API token and you use a proxy, you may need to turn off your VPN/proxy or use the --ca-certificate flag to allow your proxy&amp;rsquo;s certificate using the directions here: https://github.com/bridgecrewio/checkov/pull/1099. If you run Checkov without the Bridgecrew API token, this won&amp;rsquo;t be an issue.
Run Checkov locally To demonstrate what kinds of security and compliance errors Bridgecrew can identify in Terraform templates, start by using Checkov and send the results to the Bridgecrew platform.</description>
    </item>
    
    <item>
      <title>Checkov</title>
      <link>/terraform/30_module_one/1002_local_scan_cli.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/30_module_one/1002_local_scan_cli.html</guid>
      <description>If you are running Checkov with the Bridgecrew API token and you use a proxy, you may need to turn off your VPN/proxy or use the --ca-certificate flag to allow your proxy&amp;rsquo;s certificate using the directions here: https://github.com/bridgecrewio/checkov/pull/1099. If you run Checkov without the Bridgecrew API token, this won&amp;rsquo;t be an issue.
Run Checkov locally To demonstrate what kinds of security and compliance errors Bridgecrew can identify in Terraform templates, start by using Checkov and send the results to the Bridgecrew platform.</description>
    </item>
    
    <item>
      <title>Checkov CLI</title>
      <link>/cloudformation/10_module_one/1002_local_scan_cli.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/10_module_one/1002_local_scan_cli.html</guid>
      <description>Run Checkov CLI locally To demonstrate what kinds of security and compliance errors Bridgecrew can identify in CloudFormation templates, we’ll start by using Checkov CLI and send the results to the Bridgecrew platform.
Make sure you are in the cfngoat directory from the previous step, copy your unique Bridgecrew API token, and scan the cfngoat.yaml file:
checkov -f cfngoat.yaml --bc-api-key $YOUR_BC_API_KEY --repo-id bridgecrewio/cfngoat --branch main You can also scan entire directories with -d &amp;lt;path&amp;gt;:</description>
    </item>
    
    <item>
      <title>Bridgecrew Dashboard</title>
      <link>/azure/30_module_one/1003_local_scan_dashboard.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/30_module_one/1003_local_scan_dashboard.html</guid>
      <description>Viewing results in Bridgecrew You just scanned your Terraform templates locally using Checkov. If you included your API key, the results were sent to the Bridgecrew platform for further investigation. You may have noticed the URL at the end of the CLI scan. That’s a direct link to the results in Bridgecrew.
Click on that link to bring up that scan’s Projects page, which is an aggregated view of the different Code Reviews across all scan types.</description>
    </item>
    
    <item>
      <title>Bridgecrew Dashboard</title>
      <link>/terraform/30_module_one/1003_local_scan_dashboard.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/30_module_one/1003_local_scan_dashboard.html</guid>
      <description>Viewing results in Bridgecrew You just scanned your Terraform templates locally using Checkov. If you included your API key, the results were sent to the Bridgecrew platform for further investigation. You may have noticed the URL at the end of the CLI scan. That’s a direct link to the results in Bridgecrew.
Click on that link to bring up that scan’s Projects page, which is an aggregated view of the different Code Reviews across all scan types.</description>
    </item>
    
    <item>
      <title>VSCode Plugin</title>
      <link>/cloudformation/10_module_one/1003_vscode.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/10_module_one/1003_vscode.html</guid>
      <description>Visual Studio Code extension The Bridgecrew CLI can be used for a quick local scan, but is better suited when automated into a CI/CD pipeline, which we&amp;rsquo;ll dive into in Module Two.
For more developer-friendly local scanning, Bridgecrew&amp;rsquo;s Checkov VS Code extension shows scan results directly at the point of code, without having to constantly re-run the CLI tool. Results and suggested fixes are annotated directly onto the specific code block causing the violation in real-time.</description>
    </item>
    
    <item>
      <title>Bridgecrew Dashboard</title>
      <link>/cloudformation/10_module_one/1004_local_scan_dashboard.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/10_module_one/1004_local_scan_dashboard.html</guid>
      <description>Viewing results in Bridgecrew In the previous section, we scanned our demo CloudFormation repository locally with both standalone CLI and the Checkov VSCode plugin, and sent the results to the Bridgecrew platform for investigation and remediation.
To explore the reported issues we saw in the CLI output, click on the link at the end of the output or head to the Projects tab in your Bridgecrew account.
Bridgecrew comes with hundreds of out-of-the-box policies to help you adhere to cloud security best practices as defined by the Center of Internet Security (CIS).</description>
    </item>
    
    <item>
      <title>VS Code Plugin</title>
      <link>/azure/30_module_one/1004_vs_code.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/30_module_one/1004_vs_code.html</guid>
      <description>Run Checkov in your IDE You can get feedback directly in your integrated development environment (IDE) using Bridgecrew’s Checkov Visual Studio Code extension. The tool highlights misconfigurations inline and in development environments—like spell check for IaC misconfigurations.
First, you need to install the extension. In VS Code, go to Extensions and search for Checkov. Click Install.
Next, go to the Checkov Extension Settings and paste the API Token from the Bridgecrew platform that we saved earlier.</description>
    </item>
    
    <item>
      <title>VS Code Plugin</title>
      <link>/terraform/30_module_one/1004_vs_code.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/30_module_one/1004_vs_code.html</guid>
      <description>Run Checkov in your IDE You can get feedback directly in your integrated development environment (IDE) using Bridgecrew’s Checkov Visual Studio Code extension. The tool highlights misconfigurations inline and in development environments—like spell check for IaC misconfigurations.
First, you need to install the extension. In VS Code, go to Extensions and search for Checkov. Click Install.
Next, go to the Checkov Extension Settings and paste the API Token from the Bridgecrew platform that we saved earlier.</description>
    </item>
    
    <item>
      <title>CloudFormation repository setup</title>
      <link>/cloudformation/20_module_two/2001_automating_iac_github.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/20_module_two/2001_automating_iac_github.html</guid>
      <description>Creating your own CfnGoat repository on GitHub To set up our continuous workflow and demonstrate the value of getting automated infrastructure security scanning, we need a hosted source repository. You can either push your local demo repository to GitHub or, since CfnGoat is already hosted on GitHub, we recommend you fork the repository to your own GitHub account.
Head to your GitHub account, visit the CfnGoat repository at https://github.com/bridgecrewio/cfngoat, and select Fork in the top right-hand corner:</description>
    </item>
    
    <item>
      <title>GitHub Action</title>
      <link>/azure/40_module_two/2001_automating_iac_github_action.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/40_module_two/2001_automating_iac_github_action.html</guid>
      <description>Setting up the Bridgecrew GitHub Action You can leverage GitHub actions to run automated scans for every build or specific builds, such as the ones that merge into the master branch. This action can alert on misconfigurations, or you can set it up to block code from being merged if certain policies are violated. It can also send the results to Bridgecrew for further review and remediation steps.
Typically, you wouldn’t do more than one scan during a build, such as two Actions, a CI/CD integration and a Terraform Cloud scan, so you can remove the Actions when you set up the Terraform Cloud scan or leave it for illustrative purposes.</description>
    </item>
    
    <item>
      <title>GitHub Action</title>
      <link>/terraform/40_module_two/2001_automating_iac_github_action.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2001_automating_iac_github_action.html</guid>
      <description>Setting up the Bridgecrew GitHub Action You can leverage GitHub actions to run automated scans for every build or specific builds, such as the ones that merge into the master branch. This action can alert on misconfigurations, or you can set it up to block code from being merged if certain policies are violated. It can also send the results to Bridgecrew for further review and remediation steps.
Typically, you wouldn’t do more than one scan during a build, such as two Actions, a CI/CD integration and a Terraform Cloud scan, so you can remove the Actions when you set up the Terraform Cloud scan or leave it for illustrative purposes.</description>
    </item>
    
    <item>
      <title>AWS CodeBuild setup</title>
      <link>/cloudformation/20_module_two/2002_automating_iac_codebuild.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/20_module_two/2002_automating_iac_codebuild.html</guid>
      <description>Setting up AWS CodeBuild for our CloudFormation repository. AWS CodeBuild paired with AWS CodePipeline is a CI/CD platform that can build projects, run jobs, and deploy infrastructure. We’re going to use it to scan the CloudFormation templates before deployment, allowing us to fail the build job and halt a deployment if there are any security violations in our CloudFormation code.
We’ll also automatically send the results to Brigecrew to maintain a view across all of our infrastructure projects and share visibility throughout our organization.</description>
    </item>
    
    <item>
      <title>Yor tag &amp; trace</title>
      <link>/azure/40_module_two/2002_yor_github_action.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/40_module_two/2002_yor_github_action.html</guid>
      <description>An introduction to Yor Yor is an open-source tool that automatically tags infrastructure as code (IaC) templates with attribution and ownership details, unique IDs that get carried across to cloud resources, and any other need-to-know information. It can run locally, as a pre-commit hook, or in a CI/CD pipeline.
For drift detection, the important tag is yor_trace. It’s a unique identifier that helps us trace from a cloud runtime configuration back to the IaC that provisioned it.</description>
    </item>
    
    <item>
      <title>Yor tag &amp; trace</title>
      <link>/terraform/40_module_two/2002_yor_github_action.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2002_yor_github_action.html</guid>
      <description>An introduction to Yor Yor is an open-source tool that automatically tags infrastructure as code (IaC) templates with attribution and ownership details, unique IDs that get carried across to cloud resources, and any other need-to-know information. It can run locally, as a pre-commit hook, or in a CI/CD pipeline.
For drift detection, the important tag is yor_trace. It’s a unique identifier that helps us trace from a cloud runtime configuration back to the IaC that provisioned it.</description>
    </item>
    
    <item>
      <title>Edit IAM for CodeBuild</title>
      <link>/cloudformation/20_module_two/2003_automating_iac_codebuild_iam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/20_module_two/2003_automating_iac_codebuild_iam.html</guid>
      <description>Edit AWS IAM permissions to enable CodeBuild To give CodeBuild access to our Bridgecrew API secret we stored in AWS System Manager, we’ll need to add more permissions to the default IAM role created for new CodeBuild environments.
In the AWS IAM Dashboard, find the role called codebuild-bridgecrew-tutorial-service-role
Select the role, then click select Add Inline Policy from the right hand side.
This will bring up the &amp;ldquo;create policy visual editor&amp;rdquo;, for Service, select Systems Manager in the search box, then chose the GetParameters and GetParameter Actions.</description>
    </item>
    
    <item>
      <title>Terraform Cloud</title>
      <link>/azure/40_module_two/2003_automating_iac_terraform_cloud.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/40_module_two/2003_automating_iac_terraform_cloud.html</guid>
      <description>Leveraging Terraform Cloud and Sentinel for Bridgecrew scans Bridgecrew has a native integration with Terraform Cloud that leverages Sentinel for policy controls. This means any commit that is pushed to Terraform Cloud will run through a Bridgecrew scan, identifying policy violations, blocking misconfigured builds, and detecting drift, all from the same place that you collaborate on Terraform templates, automate deployments, and store state.
Sentinel is a paid add-on. If you want to try this out for free, HashiCorp does offer a free trial.</description>
    </item>
    
    <item>
      <title>Terraform Cloud</title>
      <link>/terraform/40_module_two/2003_automating_iac_terraform_cloud.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2003_automating_iac_terraform_cloud.html</guid>
      <description>Leveraging Terraform Cloud and Sentinel for Bridgecrew scans Bridgecrew has a native integration with Terraform Cloud that leverages Sentinel for policy controls. This means any commit that is pushed to Terraform Cloud will run through a Bridgecrew scan, identifying policy violations, blocking misconfigured builds, and detecting drift, all from the same place that you collaborate on Terraform templates, automate deployments, and store state.
Sentinel is a paid add-on. If you want to try this out for free, HashiCorp does offer a free trial.</description>
    </item>
    
    <item>
      <title>AWS CodePipeline Setup</title>
      <link>/cloudformation/20_module_two/2004_automating_iac_codepipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/20_module_two/2004_automating_iac_codepipeline.html</guid>
      <description>Setting up AWS CodePipeline to automatically trigger scans To trigger CodeBuild to run the scan automatically on each new commit in your CfnGoat GitHub repository, we’ll need to configure AWS CodePipeline. You can skip this step, but if you do, you’ll only be able to run manual scans from the CodeBuild UI, AWS CLI, or APIs, which doesn’t provide the DevSecOps automation we’re looking for!
To set it up, go to AWS CodePipeline and select Create Pipeline:</description>
    </item>
    
    <item>
      <title>GitHub Application</title>
      <link>/azure/40_module_two/2004_github_application.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/40_module_two/2004_github_application.html</guid>
      <description>Integrating Bridgecrew with GitHub In this section, you’ll add a GitHub integration to automatically generate pull request comments and set up for automated fix pull requests (PRs) in the next section. This integration also provides native and automated scanning of incoming commits and pull requests.
Head back to the Bridgecrew Integrations tab and select GitHub under the Code Repositories section and click on the &amp;ldquo;GitHub organization&amp;rdquo; link:
Choose which accounts and repositories to grant the Bridgecrew GitHub integration access to:</description>
    </item>
    
    <item>
      <title>GitHub Application</title>
      <link>/terraform/40_module_two/2004_github_application.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2004_github_application.html</guid>
      <description>Integrating Bridgecrew with GitHub In this section, you’ll add a GitHub integration to automatically generate pull request comments and set up for automated fix pull requests (PRs) in the next section. This integration also provides native and automated scanning of incoming commits and pull requests.
Head back to the Bridgecrew Integrations tab and select GitHub under the Code Repositories section and click on the &amp;ldquo;GitHub organization&amp;rdquo; link:
Choose which accounts and repositories to grant the Bridgecrew GitHub integration access to:</description>
    </item>
    
    <item>
      <title>Pipeline Results</title>
      <link>/cloudformation/20_module_two/2005_automating_iac_results.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/20_module_two/2005_automating_iac_results.html</guid>
      <description>Reviewing our pipeline results Your new CodePipeline will immediatley start running your CodeBuild job against the latest commit in your GFNGoat Repository.
You will be taken to the Pipeline Jobs page where you will see the progress as CodeBuild checks out the latest commit from GitHub and starts our job to run Bridgecrew against the CloudFormation configuration.
Below we see the Pipeline sucessfully created and starting to run:
If everything goes as intended, the pipeline should fail at the build stage since the CfnGoat code is purposely designed with security flaws.</description>
    </item>
    
    <item>
      <title>Test pull request</title>
      <link>/azure/40_module_two/2005_kickoff_pr.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/40_module_two/2005_kickoff_pr.html</guid>
      <description>Kick off a test pull request Check that all three integrations are working by kicking off a pull request. Go back to your fork of the TerraGoat repo and select &amp;ldquo;Add file&amp;rdquo; -&amp;gt; &amp;ldquo;Create new file.&amp;rdquo; Set the path to terraform/simple_instance/storage.tf. Add the following code:
provider &amp;#34;random&amp;#34; { } resource &amp;#34;random_string&amp;#34; &amp;#34;sa_name_affix&amp;#34; { length = 8 special = false upper = false } provider &amp;#34;azurerm&amp;#34; { features {} } resource &amp;#34;azurerm_resource_group&amp;#34; &amp;#34;trekgroup&amp;#34; { name = &amp;#34;trekgroup-resources&amp;#34; location = &amp;#34;West US&amp;#34; } resource &amp;#34;azurerm_storage_account&amp;#34; &amp;#34;storagebay&amp;#34; { name = &amp;#34;storagebay${random_string.</description>
    </item>
    
    <item>
      <title>Test pull request</title>
      <link>/terraform/40_module_two/2005_kickoff_pr.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/40_module_two/2005_kickoff_pr.html</guid>
      <description>Kick off a test pull request Check that all three integrations are working by kicking off a pull request. Go back to your fork of the TerraGoat repo and select &amp;ldquo;Add file&amp;rdquo; -&amp;gt; &amp;ldquo;Create new file.&amp;rdquo; Set the path to terraform/simple_instance/s3.tf. Add the following code:
provider &amp;#34;aws&amp;#34; { region = &amp;#34;us-west-2&amp;#34; } resource &amp;#34;aws_s3_bucket&amp;#34; &amp;#34;docking_bay&amp;#34; { bucket_prefix = &amp;#34;docking-bay-storage-&amp;#34; tags = { Name = &amp;#34;Docking Bay&amp;#34; Environment = &amp;#34;Dev&amp;#34; } } Select &amp;ldquo;Create a new branch&amp;rdquo; and &amp;ldquo;Propose new file.</description>
    </item>
    
    <item>
      <title>GitHub Actions</title>
      <link>/cloudformation/20_module_two/2006_automating_iac_github_actions.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/20_module_two/2006_automating_iac_github_actions.html</guid>
      <description>Setting up GitHub Actions for our CloudFormation repository. If your existing CI/CD Pipeline runs in GitHub Actions, this can also be configured to scan the CloudFormation templates before deployment, allowing us to fail the build job and halt a deployment if there are any security violations in our CloudFormation code.
As with AWS CodeBuild, we’ll also automatically send the results to Brigecrew to maintain a view across all of our infrastructure projects and share visibility throughout our organization.</description>
    </item>
    
    <item>
      <title>Bridgecrew platform results</title>
      <link>/azure/50_module_three/3001_bridgecrew_dashboard_results.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/50_module_three/3001_bridgecrew_dashboard_results.html</guid>
      <description>Investigating security violations in Bridgecrew Providing feedback in IDEs and CI/CD pipelines provides valuable insights into the posture of your code. Bridgecrew provides a centralized view for tracking misconfigurations across your code scans and runtime environments. We’ll start with the view across code scans.
Navigate to the Projects tab in the Bridgecrew platform. Here you can see the results of your GitHub scan, as well as any other code scan that includes a repository ID and your Bridgecrew API.</description>
    </item>
    
    <item>
      <title>Bridgecrew platform results</title>
      <link>/cloudformation/30_module_three/3001_bridgecrew_dashboard_results.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/30_module_three/3001_bridgecrew_dashboard_results.html</guid>
      <description>Investigating security violations in Bridgecrew While the output from your CodeBuild run is very useful for quickly getting a sense of why your build failed, you may also want to visualize issues over time with a given repository or group objects affected by the same issue for clearer understanding.
If your developers don’t have direct access to the AWS account, the provided logs may be constrained.
For all those reasons and more, Bridgecrew provides reporting, monitoring, alerting, and visualizations for individual runs and across your entire infrastructure.</description>
    </item>
    
    <item>
      <title>Bridgecrew platform results</title>
      <link>/terraform/50_module_three/3001_bridgecrew_dashboard_results.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3001_bridgecrew_dashboard_results.html</guid>
      <description>Investigating security violations in Bridgecrew Providing feedback in IDEs and CI/CD pipelines provides valuable insights into the posture of your code. Bridgecrew provides a centralized view for tracking misconfigurations across your code scans and runtime environments. We’ll start with the view across code scans.
Navigate to the Projects tab in the Bridgecrew platform. Here you can see the results of your GitHub scan, as well as any other code scan that includes a repository ID and your Bridgecrew API.</description>
    </item>
    
    <item>
      <title>GitHub integration</title>
      <link>/cloudformation/30_module_three/3002_bridgecrew_automate_integrate_github.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/30_module_three/3002_bridgecrew_automate_integrate_github.html</guid>
      <description>Integrating Bridgecrew with GitHub By adding another Bridgecrew integration, you can generate and push automated pull requests (PRs) back into your GitHub repository to update your CloudFormation code and fix security issues, as well as gain automated scanning of incoming community pull requests with bot generated comments for misconfigurations.
Head back to the Bridgecrew Integrations tab and select GitHub under the Code Repositories section. Click on the &amp;ldquo;GitHub organization&amp;rdquo; link to grant Bridgecrew access to your organization.</description>
    </item>
    
    <item>
      <title>Pull request fixes</title>
      <link>/azure/50_module_three/3002_bridgecrew_pull_request_fix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/50_module_three/3002_bridgecrew_pull_request_fix.html</guid>
      <description>Automating fixes through pull requests Now that you’ve pulled in multiple infrastructure sources, you may get overwhelmed at the prospect of fixing the several dozen issues Bridgecrew has identified. To help us implement fixes as fast as possible, Bridgecrew generates and pushes fix pull requests back into your GitHub repository. These fixes are sourced from static recommendations and Smart Fixes that are fixes sourced from your own repositories based on other code that has passed those checks.</description>
    </item>
    
    <item>
      <title>Pull request fixes</title>
      <link>/terraform/50_module_three/3002_bridgecrew_pull_request_fix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3002_bridgecrew_pull_request_fix.html</guid>
      <description>Automating fixes through pull requests Now that you’ve pulled in multiple infrastructure sources, you may get overwhelmed at the prospect of fixing the several dozen issues Bridgecrew has identified. To help us implement fixes as fast as possible, Bridgecrew generates and pushes fix pull requests back into your GitHub repository. These fixes are sourced from static recommendations and Smart Fixes that are fixes sourced from your own repositories based on other code that has passed those checks.</description>
    </item>
    
    <item>
      <title>AWS runtime scanning</title>
      <link>/terraform/50_module_three/3003_bridgecrew_automate_add_runtime.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3003_bridgecrew_automate_add_runtime.html</guid>
      <description>Scanning runtime resources for vulnerable infrastructure Let’s switch gears to address infrastructure that wasn&amp;rsquo;t deployed by Terraform.
Greenfield infrastructure as code deployments are a luxury not many of us have. In reality, our AWS accounts have objects that were created manually for one reason or another. Transitioning to IaC is rarely a one-and-done affair, so you may have objects in your AWS accounts that are managed by a team that has not yet made the switch.</description>
    </item>
    
    <item>
      <title>Azure runtime scanning</title>
      <link>/azure/50_module_three/3003_bridgecrew_automate_add_runtime.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/50_module_three/3003_bridgecrew_automate_add_runtime.html</guid>
      <description>Scanning runtime resources for vulnerable infrastructure Let’s switch gears to address infrastructure that wasn&amp;rsquo;t deployed by Terraform.
Greenfield infrastructure as code deployments are a luxury not many of us have. In reality, our Azure accounts have objects that were created manually for one reason or another. Transitioning to IaC is rarely a one-and-done affair, so you may have objects in your Azure accounts that are managed by a team that has not yet made the switch.</description>
    </item>
    
    <item>
      <title>Pull request fixes</title>
      <link>/cloudformation/30_module_three/3003_bridgecrew_automate_pr_remediation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/30_module_three/3003_bridgecrew_automate_pr_remediation.html</guid>
      <description>Automating fixes through pull requests Now that you’ve pulled in multiple infrastructure sources, you might be getting overwhelmed at the prospect of fixing the several dozen issues Bridgecrew has identified. To help you implement fixes as fast as possible, Bridgecrew generates and pushes fix pull requests back into your GitHub repository.
Let’s walk through the process with one of the policies we looked at earlier, Ensure S3 bucket has ‘restrict_public_bucket’ enabled:</description>
    </item>
    
    <item>
      <title>AWS fixes in runtime</title>
      <link>/terraform/50_module_three/3004_bridgecrew_automate_fix_runtime.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3004_bridgecrew_automate_fix_runtime.html</guid>
      <description>Automating fixes in runtime Similar to what we did with pull request fixes in the previous module, Bridgecrew allows for immediate remediation of issues in runtime by reconfiguring your objects via the AWS APIs. Typically, it&amp;rsquo;s a best practice to make all changes to IaC provisioned resources in the code that provisioned them or else you create drift (discussed next). However, for resources not provisioned using IaC templates, runtime remediations make meeting compliance much easier.</description>
    </item>
    
    <item>
      <title>AWS runtime scanning</title>
      <link>/cloudformation/30_module_three/3004_bridgecrew_automate_add_runtime.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/30_module_three/3004_bridgecrew_automate_add_runtime.html</guid>
      <description>Scanning runtime resources for vulnerable infrastructure Last but definitely not least, let’s switch gears to address infrastructure that wasn&amp;rsquo;t deployed by CloudFormation.
Greenfield infrastructure as code deployments are a luxury not many of us have. In reality, our AWS accounts have objects that were created manually for one reason or another. Transitioning to IaC is rarely a one-and-done affair, so you may have objects in your AWS accounts that are managed by a team that has not yet made the switch.</description>
    </item>
    
    <item>
      <title>Drift Detection</title>
      <link>/azure/50_module_three/3005_bridgecrew_drift_detections.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/azure/50_module_three/3005_bridgecrew_drift_detections.html</guid>
      <description>Drift Detection between Azure and Terraform Cloud state using Bridgecrew In this final section, you’ll switch gears and detect drift. Drift occurs when the infrastructure deployed in the cloud is different from what was defined in the IaC template. You call what the infrastructure should be the “state” saved in files locally or in Terraform Cloud. For example, if the infrastructure in Azure may have different configurations than the Terraform template defined.</description>
    </item>
    
    <item>
      <title>Drift Detection</title>
      <link>/terraform/50_module_three/3005_bridgecrew_drift_detections.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform/50_module_three/3005_bridgecrew_drift_detections.html</guid>
      <description>Drift Detection between AWS and Terraform Cloud state using Bridgecrew In this final section, you’ll switch gears and detect drift. Drift occurs when the infrastructure deployed in the cloud is different from what was defined in the IaC template. You call what the infrastructure should be the “state” saved in files locally or in Terraform Cloud. For example, if the infrastructure in AWS may have different configurations than the Terraform template defined.</description>
    </item>
    
    <item>
      <title>AWS fixes in runtime</title>
      <link>/cloudformation/30_module_three/3005_bridgecrew_automate_fix_runtime.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/30_module_three/3005_bridgecrew_automate_fix_runtime.html</guid>
      <description>Automating fixes in runtime Similar to what we did with pull request fixes in the previous module, Bridgecrew allows for immediate remediation of issues in runtime by reconfiguring your objects via the AWS APIs.
Implementing automated remediations does require extra permissions than previously granted with the default AWS Read Only integration. When you attempt a runtime remediation without the correct permissions, you’ll be prompted to configure the AWS Remediation Stack:</description>
    </item>
    
    <item>
      <title>Example pull request and drift detection</title>
      <link>/cloudformation/30_module_three/3006_bridgecrew_example_pr.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/30_module_three/3006_bridgecrew_example_pr.html</guid>
      <description>Example pull request Now that we have a full pipeline, let&amp;rsquo;s try it out! Go to GitHub and your CfnGoat fork. Select Add file and Create new file. Make the file path workshop/s3.yaml. Then copy and paste this CloudFormation code.
Resources: S3Bucket: Type: &amp;#39;AWS::S3::Bucket&amp;#39; DeletionPolicy: Retain Properties: Tags: - Key: Class Value: Sovereign - Key: Tag Value: Fine BucketName: !Join - &amp;#34;-&amp;#34; - - &amp;#34;starship-bay3&amp;#34; - !Select - 0 - !</description>
    </item>
    
    <item>
      <title>Tag &amp; Trace resources</title>
      <link>/cloudformation/35_module_four/3501_introducing_yor_cli.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/35_module_four/3501_introducing_yor_cli.html</guid>
      <description>Using the Yor CLI We&amp;rsquo;re going to use the Yor CLI to add tracability tags to a deployable infrastructure-as-code repoistory.
Installing Yor We have already installed Yor into our Cloud9 environment at the beginning of this workshop, for other installation options (for example, to use Yor locally on your machine, see the options in the Yor.io installation docs
Clone the sample repository While we could use Yor to tag our CFNGoat repository, we would not want to deploy infrastructure with that many intentional security issues into our AWS accounts.</description>
    </item>
    
    <item>
      <title>Automated Tracing</title>
      <link>/cloudformation/35_module_four/3502_yor_automated_tracing.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/35_module_four/3502_yor_automated_tracing.html</guid>
      <description>Integrating Yor into your CI pipeline. In the same way as Checkov can be used for both a quick local scan or automated as part of your CI pipeline, Yor is designed to do the same.
The following simple Github action will run Yor, auto-committing new tags on changed resources
name: yor on: - push - pull_request jobs: add-your-tags: runs-on: ubuntu-latest strategy: matrix: python-version: [3.7] steps: - name: Checkout repo uses: actions/checkout@v2 with: fetch-depth: 0 - name: Run yor action uses: bridgecrewio/yor-action@main Lets take a look at this in action:</description>
    </item>
    
    <item>
      <title>Using Yor Tracing</title>
      <link>/cloudformation/35_module_four/3503_using_yor_traces.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cloudformation/35_module_four/3503_using_yor_traces.html</guid>
      <description>Using Yor traces in runtime Easily find Cloud Resources based on git information Once our resources are deployed, we now have multiple ways to find, link and correlate between the who and what of our IaC actions in git, and the real resources running in our cloud environment.
For example, we can use the bridgecrew dashboard resource explorer, to query for all runtime resources in our AWS account which were last modified by matt-at-bridgecrew.</description>
    </item>
    
  </channel>
</rss>
