<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Module 3 - Fix on Cloud DevSecOps with Bridgecrew</title><link>/aws-modernization-workshop-bridgecrew/30_module_three.html</link><description>Recent content in Module 3 - Fix on Cloud DevSecOps with Bridgecrew</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/aws-modernization-workshop-bridgecrew/30_module_three/index.xml" rel="self" type="application/rss+xml"/><item><title>Bridgecrew platform results</title><link>/aws-modernization-workshop-bridgecrew/30_module_three/3001_bridgecrew_dashboard_results.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/30_module_three/3001_bridgecrew_dashboard_results.html</guid><description>Investigating security violations in Bridgecrew While the output from your CodeBuild run is very useful for quickly getting a sense of why your build failed, you may also want to visualize issues over time with a given repository or group objects affected by the same issue for clearer understanding.
If your developers don’t have direct access to the AWS account, the provided logs may be constrained.
For all those reasons and more, Bridgecrew provides reporting, monitoring, alerting, and visualizations for individual runs and across your entire infrastructure.</description></item><item><title>GitHub integration</title><link>/aws-modernization-workshop-bridgecrew/30_module_three/3002_bridgecrew_automate_integrate_github.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/30_module_three/3002_bridgecrew_automate_integrate_github.html</guid><description>Integrating Bridgecrew with GitHub By adding another Bridgecrew integration, you can generate and push automated pull requests (PRs) back into your GitHub repository to update your CloudFormation code and fix security issues.
Head back to the Bridgecrew IntegrationsBridgecrew Integrations tab and select the GitHub under the Source Control section.
Just like we did for the AWS CodePipeline GitHub authorization, choose which accounts and repositories to grant Bridgecrew access to.</description></item><item><title>Pull request fixes</title><link>/aws-modernization-workshop-bridgecrew/30_module_three/3003_bridgecrew_automate_pr_remediation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/30_module_three/3003_bridgecrew_automate_pr_remediation.html</guid><description>Automating fixes through pull requests Now that you’ve pulled in multiple infrastructure sources, you might be getting overwhelmed at the prospect of fixing the several dozen issues Bridgecrew has identified. To help you implement fixes as fast as possible, Bridgecrew generates and pushes fix pull requests back into your GitHub repository.
Let’s walk through the process with one of the policies we looked at earlier, Ensure S3 bucket has ‘restrict_public_bucket’ enabled:</description></item><item><title>AWS runtime scanning</title><link>/aws-modernization-workshop-bridgecrew/30_module_three/3004_bridgecrew_automate_add_runtime.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aws-modernization-workshop-bridgecrew/30_module_three/3004_bridgecrew_automate_add_runtime.html</guid><description>Scanning runtime resources for vulnerable infrastructure Last but definitely not least, let’s switch gears to address infrastructure that wasn&amp;rsquo;t deployed by CloudFormation.
Greenfield infrastructure as code deployments are a luxury not many of us have. In reality, our AWS accounts have objects that were created manually for one reason or another. Transitioning to IaC is rarely a one-and-done affair, so you may have objects in your AWS accounts that are managed by a team that has not yet made the switch.</description></item></channel></rss>